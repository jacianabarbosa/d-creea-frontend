/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 *
 */
import { Directive, Inject, Input, Renderer2, TemplateRef, ViewContainerRef, EventEmitter, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ClrPopoverToggleService } from './providers/popover-toggle.service';
import { ClrPopoverEventsService } from './providers/popover-events.service';
import { ClrPopoverPositionService } from './providers/popover-position.service';
import { debounceTime } from 'rxjs/operators';
// https://github.com/angular/angular/issues/20351#issuecomment-344009887
/** @dynamic */
export class ClrPopoverContent {
    constructor(document, container, template, renderer, smartPositionService, smartEventsService, smartOpenService) {
        this.document = document;
        this.container = container;
        this.template = template;
        this.renderer = renderer;
        this.smartPositionService = smartPositionService;
        this.smartEventsService = smartEventsService;
        this.smartOpenService = smartOpenService;
        this.subscriptions = [];
        this.shouldRealign = false;
        // Check-collector pattern:
        // In order to get accurate content height/width values, we cannot calculate alignment offsets until
        // after the projected content has stabilized.
        // As multiple check events may happen in the same rendering cycle, we need to collect all events
        // and only act after the content is really stable. Or we may get wrong intermediate positioning values.
        // We will channel subsequent content check events through this observable.
        this.checkCollector = new EventEmitter();
    }
    set open(value) {
        this.smartOpenService.open = !!value;
    }
    set contentAt(position) {
        this.smartPositionService.position = position;
    }
    set outsideClickClose(clickToClose) {
        this.smartEventsService.outsideClickClose = !!clickToClose;
    }
    set scrollToClose(scrollToClose) {
        this.smartEventsService.scrollToClose = !!scrollToClose;
    }
    ngAfterViewInit() {
        this.subscriptions.push(this.smartOpenService.openChange.subscribe(change => {
            if (change) {
                this.addContent();
            }
            else {
                this.removeContent();
            }
        }), this.smartPositionService.shouldRealign.subscribe(() => {
            this.shouldRealign = true;
            // Avoid flickering on initialization, caused by the asynchronous nature of the
            // check-collector pattern.
            if (this.view) {
                this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '0');
            }
        }), 
        // Here we collect subsequent synchronously received content-check events and only take action
        // at the end of the cycle. See below for details on the check-collector pattern.
        this.checkCollector.pipe(debounceTime(0)).subscribe(() => {
            this.alignContent();
            this.shouldRealign = false;
            if (this.view) {
                this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '1');
            }
        }));
    }
    ngOnDestroy() {
        this.removeContent();
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    removeContent() {
        if (!this.view) {
            return;
        }
        this.view.rootNodes.forEach(node => this.renderer.removeChild(this.document.body, node));
        this.container.clear();
        delete this.view;
    }
    /**
     * TODO(matt): investigate why DebugElement retains a reference to the nodes and causes a memory leak.
     * A note about the use of appendChild/removeChild
     * The DebugElement is keeping a reference to the detached node and its unclear why.
     * This does warrant further investigation. But, since it doesn't happen in production mode
     * it is a low priority issue for now.
     */
    addContent() {
        // Create the view container
        this.view = this.container.createEmbeddedView(this.template);
        this.smartEventsService.contentRef = this.view.rootNodes[0]; // So we know where/what to set close focus on
        this.renderer.addClass(this.view.rootNodes[0], 'clr-popover-content');
        // Reset to the begining of the document to be available for sizing/positioning calculations.
        // If we add new content to the bottom it triggers changes in the layout that may lead to false anchor
        // coordinates values.
        this.renderer.setStyle(this.view.rootNodes[0], 'top', '0px');
        this.renderer.setStyle(this.view.rootNodes[0], 'left', '0px');
        // We need to hide it during the calculation phase, while it's not yet finally positioned.
        this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '0');
        this.renderer.listen(this.view.rootNodes[0], 'click', event => {
            this.smartOpenService.openEvent = event;
        });
        this.view.rootNodes.forEach(node => {
            this.renderer.appendChild(this.document.body, node);
        });
        // Mark for realingment on the next content-check cycle.
        this.shouldRealign = true;
    }
    ngAfterContentChecked() {
        if (this.smartOpenService.open && this.view && this.shouldRealign) {
            // Channel content-check event through the check-collector
            this.checkCollector.emit();
        }
    }
    alignContent() {
        if (!this.view) {
            return;
        }
        const positionCoords = this.smartPositionService.alignContent(this.view.rootNodes[0]);
        this.renderer.setStyle(this.view.rootNodes[0], 'top', `${positionCoords.yOffset}px`);
        this.renderer.setStyle(this.view.rootNodes[0], 'left', `${positionCoords.xOffset}px`);
        this.smartOpenService.popoverAlignedEmit(this.view.rootNodes[0]);
    }
}
ClrPopoverContent.decorators = [
    { type: Directive, args: [{ selector: '[clrPopoverContent]' },] }
];
ClrPopoverContent.ctorParameters = () => [
    { type: HTMLDocument, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: Renderer2 },
    { type: ClrPopoverPositionService },
    { type: ClrPopoverEventsService },
    { type: ClrPopoverToggleService }
];
ClrPopoverContent.propDecorators = {
    open: [{ type: Input, args: ['clrPopoverContent',] }],
    contentAt: [{ type: Input, args: ['clrPopoverContentAt',] }],
    outsideClickClose: [{ type: Input, args: ['clrPopoverContentOutsideClickToClose',] }],
    scrollToClose: [{ type: Input, args: ['clrPopoverContentScrollToClose',] }]
};
//# sourceMappingURL=data:application/json;base64,