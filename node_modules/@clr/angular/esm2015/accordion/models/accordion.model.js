/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { AccordionStrategy } from '../enums/accordion-strategy.enum';
import { AccordionStatus } from '../enums/accordion-status.enum';
let accordionCount = 0;
export class AccordionPanelModel {
    constructor(id, accordionId) {
        this.id = id;
        this.accordionId = accordionId;
        this.status = AccordionStatus.Inactive;
        this.index = null;
        this.disabled = false;
        this.open = false;
        this.templateId = `${this.id}-${this.accordionId}`;
    }
}
export class AccordionModel {
    constructor() {
        this.strategy = AccordionStrategy.Default;
        this.accordionCount = accordionCount++;
        this._panels = {};
    }
    get panels() {
        return Object.keys(this._panels).map(id => this._panels[id]);
    }
    setStrategy(strategy) {
        this.strategy = strategy;
    }
    updatePanelOrder(ids) {
        ids.forEach((id, index) => (this._panels[id].index = index));
        this.removeOldPanels(ids);
    }
    addPanel(id, open = false) {
        this._panels[id] = new AccordionPanelModel(id, this.accordionCount);
        this._panels[id].open = open;
    }
    togglePanel(panelId, open) {
        const panelIsOpen = this._panels[panelId].open;
        if (this.strategy === AccordionStrategy.Default) {
            this.closeAllPanels();
        }
        this._panels[panelId].open = open !== undefined ? open : !panelIsOpen;
    }
    disablePanel(panelId, disabled) {
        this._panels[panelId].disabled = disabled;
    }
    closeAllPanels() {
        this.panels.forEach(panel => (this._panels[panel.id].open = false));
    }
    removeOldPanels(ids) {
        this.panels
            .filter(panel => ids.find(id => id === panel.id) === undefined)
            .forEach(panel => delete this._panels[panel.id]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2xyLWFuZ3VsYXIvc3JjL2FjY29yZGlvbi9tb2RlbHMvYWNjb3JkaW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFakUsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO0FBRXZCLE1BQU0sT0FBTyxtQkFBbUI7SUFNOUIsWUFBbUIsRUFBVSxFQUFTLFdBQTRCO1FBQS9DLE9BQUUsR0FBRixFQUFFLENBQVE7UUFBUyxnQkFBVyxHQUFYLFdBQVcsQ0FBaUI7UUFMbEUsV0FBTSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUM7UUFDbEMsVUFBSyxHQUFXLElBQUksQ0FBQztRQUNyQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLFNBQUksR0FBRyxLQUFLLENBQUM7UUFDYixlQUFVLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN1QixDQUFDO0NBQ3ZFO0FBRUQsTUFBTSxPQUFPLGNBQWM7SUFBM0I7UUFDWSxhQUFRLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDO1FBQ3JDLG1CQUFjLEdBQUcsY0FBYyxFQUFFLENBQUM7UUFDbEMsWUFBTyxHQUEwQyxFQUFFLENBQUM7SUEwQ2hFLENBQUM7SUF4Q0MsSUFBSSxNQUFNO1FBQ1IsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUEyQjtRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsR0FBYTtRQUM1QixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxFQUFVLEVBQUUsSUFBSSxHQUFHLEtBQUs7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBZSxFQUFFLElBQWM7UUFDekMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDL0MsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLGlCQUFpQixDQUFDLE9BQU8sRUFBRTtZQUMvQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxZQUFZLENBQUMsT0FBZSxFQUFFLFFBQWlCO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM1QyxDQUFDO0lBRU8sY0FBYztRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVPLGVBQWUsQ0FBQyxHQUFhO1FBQ25DLElBQUksQ0FBQyxNQUFNO2FBQ1IsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssU0FBUyxDQUFDO2FBQzlELE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IEFjY29yZGlvblN0cmF0ZWd5IH0gZnJvbSAnLi4vZW51bXMvYWNjb3JkaW9uLXN0cmF0ZWd5LmVudW0nO1xuaW1wb3J0IHsgQWNjb3JkaW9uU3RhdHVzIH0gZnJvbSAnLi4vZW51bXMvYWNjb3JkaW9uLXN0YXR1cy5lbnVtJztcblxubGV0IGFjY29yZGlvbkNvdW50ID0gMDtcblxuZXhwb3J0IGNsYXNzIEFjY29yZGlvblBhbmVsTW9kZWwge1xuICBzdGF0dXMgPSBBY2NvcmRpb25TdGF0dXMuSW5hY3RpdmU7XG4gIGluZGV4OiBudW1iZXIgPSBudWxsO1xuICBkaXNhYmxlZCA9IGZhbHNlO1xuICBvcGVuID0gZmFsc2U7XG4gIHRlbXBsYXRlSWQgPSBgJHt0aGlzLmlkfS0ke3RoaXMuYWNjb3JkaW9uSWR9YDtcbiAgY29uc3RydWN0b3IocHVibGljIGlkOiBzdHJpbmcsIHB1YmxpYyBhY2NvcmRpb25JZDogbnVtYmVyIHwgc3RyaW5nKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgQWNjb3JkaW9uTW9kZWwge1xuICBwcm90ZWN0ZWQgc3RyYXRlZ3kgPSBBY2NvcmRpb25TdHJhdGVneS5EZWZhdWx0O1xuICBwcm90ZWN0ZWQgYWNjb3JkaW9uQ291bnQgPSBhY2NvcmRpb25Db3VudCsrO1xuICBwcm90ZWN0ZWQgX3BhbmVsczogeyBbaWQ6IHN0cmluZ106IEFjY29yZGlvblBhbmVsTW9kZWwgfSA9IHt9O1xuXG4gIGdldCBwYW5lbHMoKTogQWNjb3JkaW9uUGFuZWxNb2RlbFtdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fcGFuZWxzKS5tYXAoaWQgPT4gdGhpcy5fcGFuZWxzW2lkXSk7XG4gIH1cblxuICBzZXRTdHJhdGVneShzdHJhdGVneTogQWNjb3JkaW9uU3RyYXRlZ3kpIHtcbiAgICB0aGlzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gIH1cblxuICB1cGRhdGVQYW5lbE9yZGVyKGlkczogc3RyaW5nW10pIHtcbiAgICBpZHMuZm9yRWFjaCgoaWQsIGluZGV4KSA9PiAodGhpcy5fcGFuZWxzW2lkXS5pbmRleCA9IGluZGV4KSk7XG4gICAgdGhpcy5yZW1vdmVPbGRQYW5lbHMoaWRzKTtcbiAgfVxuXG4gIGFkZFBhbmVsKGlkOiBzdHJpbmcsIG9wZW4gPSBmYWxzZSkge1xuICAgIHRoaXMuX3BhbmVsc1tpZF0gPSBuZXcgQWNjb3JkaW9uUGFuZWxNb2RlbChpZCwgdGhpcy5hY2NvcmRpb25Db3VudCk7XG4gICAgdGhpcy5fcGFuZWxzW2lkXS5vcGVuID0gb3BlbjtcbiAgfVxuXG4gIHRvZ2dsZVBhbmVsKHBhbmVsSWQ6IHN0cmluZywgb3Blbj86IGJvb2xlYW4pIHtcbiAgICBjb25zdCBwYW5lbElzT3BlbiA9IHRoaXMuX3BhbmVsc1twYW5lbElkXS5vcGVuO1xuICAgIGlmICh0aGlzLnN0cmF0ZWd5ID09PSBBY2NvcmRpb25TdHJhdGVneS5EZWZhdWx0KSB7XG4gICAgICB0aGlzLmNsb3NlQWxsUGFuZWxzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGFuZWxzW3BhbmVsSWRdLm9wZW4gPSBvcGVuICE9PSB1bmRlZmluZWQgPyBvcGVuIDogIXBhbmVsSXNPcGVuO1xuICB9XG5cbiAgZGlzYWJsZVBhbmVsKHBhbmVsSWQ6IHN0cmluZywgZGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9wYW5lbHNbcGFuZWxJZF0uZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfVxuXG4gIHByaXZhdGUgY2xvc2VBbGxQYW5lbHMoKSB7XG4gICAgdGhpcy5wYW5lbHMuZm9yRWFjaChwYW5lbCA9PiAodGhpcy5fcGFuZWxzW3BhbmVsLmlkXS5vcGVuID0gZmFsc2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlT2xkUGFuZWxzKGlkczogc3RyaW5nW10pIHtcbiAgICB0aGlzLnBhbmVsc1xuICAgICAgLmZpbHRlcihwYW5lbCA9PiBpZHMuZmluZChpZCA9PiBpZCA9PT0gcGFuZWwuaWQpID09PSB1bmRlZmluZWQpXG4gICAgICAuZm9yRWFjaChwYW5lbCA9PiBkZWxldGUgdGhpcy5fcGFuZWxzW3BhbmVsLmlkXSk7XG4gIH1cbn1cbiJdfQ==