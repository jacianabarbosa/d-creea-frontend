/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, Optional, ChangeDetectionStrategy, Input, } from '@angular/core';
import { FormGroupDirective, NgForm } from '@angular/forms';
import { startWith, filter } from 'rxjs/operators';
import { StepperService } from './providers/stepper.service';
import { AccordionService } from '../providers/accordion.service';
import { ClrStepperPanel } from './stepper-panel';
export class ClrStepper {
    constructor(formGroup, ngForm, stepperService) {
        this.formGroup = formGroup;
        this.ngForm = ngForm;
        this.stepperService = stepperService;
        this.subscriptions = [];
    }
    ngOnInit() {
        if (!this.formGroup && !this.ngForm) {
            throw new Error('To use stepper a Reactive or Template Form is required.');
        }
        this.form = this.formGroup ? this.formGroup : this.ngForm;
        this.subscriptions.push(this.listenForPanelsCompleted());
        this.subscriptions.push(this.listenForFormResetChanges());
    }
    ngOnChanges(changes) {
        if (changes.initialPanel.currentValue !== changes.initialPanel.previousValue) {
            this.stepperService.overrideInitialPanel(this.initialPanel);
        }
    }
    ngAfterViewInit() {
        this.subscriptions.push(this.listenForDOMChanges());
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
    }
    listenForFormResetChanges() {
        return this.form.statusChanges
            .pipe(filter(() => this.form.pristine)) // https://github.com/angular/angular/issues/10887
            .subscribe(() => this.stepperService.resetPanels());
    }
    listenForPanelsCompleted() {
        return this.stepperService.panelsCompleted.subscribe(panelsCompleted => {
            if (panelsCompleted && this.form.valid) {
                this.form.ngSubmit.emit();
            }
            else if (!this.form.valid && this.form.touched) {
                this.setPanelsWithFormErrors();
            }
        });
    }
    setPanelsWithFormErrors() {
        const panelsWithErrors = this.panels.reduce((panels, p) => (p.formGroup.invalid ? [...panels, p.id] : panels), []);
        this.stepperService.setPanelsWithErrors(panelsWithErrors);
    }
    listenForDOMChanges() {
        return this.panels.changes.pipe(startWith(this.panels)).subscribe((panels) => {
            this.stepperService.updatePanelOrder(panels.toArray().map(p => p.id));
            if (this.initialPanel) {
                this.stepperService.overrideInitialPanel(this.initialPanel);
            }
        });
    }
}
ClrStepper.decorators = [
    { type: Component, args: [{
                selector: 'form[clrStepper]',
                template: `<ng-content></ng-content>`,
                host: {
                    '[class.clr-accordion]': 'true',
                    '[class.clr-stepper-forms]': 'true',
                },
                providers: [StepperService, { provide: AccordionService, useExisting: StepperService }],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ClrStepper.ctorParameters = () => [
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: StepperService }
];
ClrStepper.propDecorators = {
    initialPanel: [{ type: Input, args: ['clrInitialStep',] }],
    panels: [{ type: ContentChildren, args: [ClrStepperPanel, { descendants: true },] }]
};
//# sourceMappingURL=data:application/json;base64,