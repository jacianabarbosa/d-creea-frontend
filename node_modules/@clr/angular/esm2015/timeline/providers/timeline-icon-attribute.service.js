/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ClrTimelineStepState } from '../enums/timeline-step-state.enum';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { Injectable } from '@angular/core';
export class TimelineIconAttributeService {
    constructor(commonStrings) {
        this.attributeMap = new Map();
        this.attributeMap.set(ClrTimelineStepState.NOT_STARTED, {
            iconShape: 'circle',
            iconStatus: null,
            ariaLabel: commonStrings.keys.timelineStepNotStarted,
        });
        this.attributeMap.set(ClrTimelineStepState.CURRENT, {
            iconShape: 'dot-circle',
            iconStatus: 'info',
            ariaLabel: commonStrings.keys.timelineStepCurrent,
        });
        this.attributeMap.set(ClrTimelineStepState.PROCESSING, {
            iconShape: undefined,
            iconStatus: null,
            ariaLabel: commonStrings.keys.timelineStepProcessing,
        });
        this.attributeMap.set(ClrTimelineStepState.SUCCESS, {
            iconShape: 'success-standard',
            iconStatus: 'success',
            ariaLabel: commonStrings.keys.timelineStepSuccess,
        });
        this.attributeMap.set(ClrTimelineStepState.ERROR, {
            iconShape: 'error-standard',
            iconStatus: 'danger',
            ariaLabel: commonStrings.keys.timelineStepError,
        });
    }
    getAriaLabel(step) {
        return this.attributeMap.get(step).ariaLabel;
    }
    getIconShape(step) {
        return this.attributeMap.get(step).iconShape;
    }
    getIconStatus(step) {
        return this.attributeMap.get(step).iconStatus;
    }
}
TimelineIconAttributeService.decorators = [
    { type: Injectable }
];
TimelineIconAttributeService.ctorParameters = () => [
    { type: ClrCommonStringsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtaWNvbi1hdHRyaWJ1dGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nsci1hbmd1bGFyL3NyYy90aW1lbGluZS9wcm92aWRlcnMvdGltZWxpbmUtaWNvbi1hdHRyaWJ1dGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFekUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbEYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxNQUFNLE9BQU8sNEJBQTRCO0lBR3ZDLFlBQVksYUFBc0M7UUFGMUMsaUJBQVksR0FBOEMsSUFBSSxHQUFHLEVBQXdDLENBQUM7UUFHaEgsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFO1lBQ3RELFNBQVMsRUFBRSxRQUFRO1lBQ25CLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLHNCQUFzQjtTQUNyRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUU7WUFDbEQsU0FBUyxFQUFFLFlBQVk7WUFDdkIsVUFBVSxFQUFFLE1BQU07WUFDbEIsU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CO1NBQ2xELENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRTtZQUNyRCxTQUFTLEVBQUUsU0FBUztZQUNwQixVQUFVLEVBQUUsSUFBSTtZQUNoQixTQUFTLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxzQkFBc0I7U0FDckQsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFO1lBQ2xELFNBQVMsRUFBRSxrQkFBa0I7WUFDN0IsVUFBVSxFQUFFLFNBQVM7WUFDckIsU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CO1NBQ2xELENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRTtZQUNoRCxTQUFTLEVBQUUsZ0JBQWdCO1lBQzNCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtTQUNoRCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sWUFBWSxDQUFDLElBQTBCO1FBQzVDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQy9DLENBQUM7SUFFTSxZQUFZLENBQUMsSUFBMEI7UUFDNUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDL0MsQ0FBQztJQUVNLGFBQWEsQ0FBQyxJQUEwQjtRQUM3QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUNoRCxDQUFDOzs7WUExQ0YsVUFBVTs7O1lBSEYsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBDbHJUaW1lbGluZVN0ZXBTdGF0ZSB9IGZyb20gJy4uL2VudW1zL3RpbWVsaW5lLXN0ZXAtc3RhdGUuZW51bSc7XG5pbXBvcnQgeyBJY29uQXR0cmlidXRlcyB9IGZyb20gJy4uL2ludGVyZmFjZS9pY29uLWF0dHJpYnV0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZWxpbmVJY29uQXR0cmlidXRlU2VydmljZSB7XG4gIHByaXZhdGUgYXR0cmlidXRlTWFwOiBNYXA8Q2xyVGltZWxpbmVTdGVwU3RhdGUsIEljb25BdHRyaWJ1dGVzPiA9IG5ldyBNYXA8Q2xyVGltZWxpbmVTdGVwU3RhdGUsIEljb25BdHRyaWJ1dGVzPigpO1xuXG4gIGNvbnN0cnVjdG9yKGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVNYXAuc2V0KENsclRpbWVsaW5lU3RlcFN0YXRlLk5PVF9TVEFSVEVELCB7XG4gICAgICBpY29uU2hhcGU6ICdjaXJjbGUnLFxuICAgICAgaWNvblN0YXR1czogbnVsbCxcbiAgICAgIGFyaWFMYWJlbDogY29tbW9uU3RyaW5ncy5rZXlzLnRpbWVsaW5lU3RlcE5vdFN0YXJ0ZWQsXG4gICAgfSk7XG4gICAgdGhpcy5hdHRyaWJ1dGVNYXAuc2V0KENsclRpbWVsaW5lU3RlcFN0YXRlLkNVUlJFTlQsIHtcbiAgICAgIGljb25TaGFwZTogJ2RvdC1jaXJjbGUnLFxuICAgICAgaWNvblN0YXR1czogJ2luZm8nLFxuICAgICAgYXJpYUxhYmVsOiBjb21tb25TdHJpbmdzLmtleXMudGltZWxpbmVTdGVwQ3VycmVudCxcbiAgICB9KTtcbiAgICB0aGlzLmF0dHJpYnV0ZU1hcC5zZXQoQ2xyVGltZWxpbmVTdGVwU3RhdGUuUFJPQ0VTU0lORywge1xuICAgICAgaWNvblNoYXBlOiB1bmRlZmluZWQsXG4gICAgICBpY29uU3RhdHVzOiBudWxsLFxuICAgICAgYXJpYUxhYmVsOiBjb21tb25TdHJpbmdzLmtleXMudGltZWxpbmVTdGVwUHJvY2Vzc2luZyxcbiAgICB9KTtcbiAgICB0aGlzLmF0dHJpYnV0ZU1hcC5zZXQoQ2xyVGltZWxpbmVTdGVwU3RhdGUuU1VDQ0VTUywge1xuICAgICAgaWNvblNoYXBlOiAnc3VjY2Vzcy1zdGFuZGFyZCcsXG4gICAgICBpY29uU3RhdHVzOiAnc3VjY2VzcycsXG4gICAgICBhcmlhTGFiZWw6IGNvbW1vblN0cmluZ3Mua2V5cy50aW1lbGluZVN0ZXBTdWNjZXNzLFxuICAgIH0pO1xuICAgIHRoaXMuYXR0cmlidXRlTWFwLnNldChDbHJUaW1lbGluZVN0ZXBTdGF0ZS5FUlJPUiwge1xuICAgICAgaWNvblNoYXBlOiAnZXJyb3Itc3RhbmRhcmQnLFxuICAgICAgaWNvblN0YXR1czogJ2RhbmdlcicsXG4gICAgICBhcmlhTGFiZWw6IGNvbW1vblN0cmluZ3Mua2V5cy50aW1lbGluZVN0ZXBFcnJvcixcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBcmlhTGFiZWwoc3RlcDogQ2xyVGltZWxpbmVTdGVwU3RhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZU1hcC5nZXQoc3RlcCkuYXJpYUxhYmVsO1xuICB9XG5cbiAgcHVibGljIGdldEljb25TaGFwZShzdGVwOiBDbHJUaW1lbGluZVN0ZXBTdGF0ZSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlTWFwLmdldChzdGVwKS5pY29uU2hhcGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0SWNvblN0YXR1cyhzdGVwOiBDbHJUaW1lbGluZVN0ZXBTdGF0ZSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlTWFwLmdldChzdGVwKS5pY29uU3RhdHVzO1xuICB9XG59XG4iXX0=