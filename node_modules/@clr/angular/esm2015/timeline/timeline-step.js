/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChild, ElementRef, Inject, Input, PLATFORM_ID } from '@angular/core';
import { ClrTimelineStepState } from './enums/timeline-step-state.enum';
import { TimelineIconAttributeService } from './providers/timeline-icon-attribute.service';
import { ClrTimelineStepTitle } from './timeline-step-title';
import { isPlatformBrowser } from '@angular/common';
export class ClrTimelineStep {
    constructor(iconAttributeService, platformId) {
        this.iconAttributeService = iconAttributeService;
        this.platformId = platformId;
        this.state = ClrTimelineStepState.NOT_STARTED;
    }
    ngAfterContentInit() {
        if (this.stepTitle && isPlatformBrowser(this.platformId)) {
            this.stepTitleText = this.stepTitle.nativeElement.innerText;
        }
    }
    get iconAriaCurrent() {
        return this.state === ClrTimelineStepState.CURRENT;
    }
    get iconAriaLabel() {
        return this.iconAttributeService.getAriaLabel(this.state);
    }
    get iconShape() {
        return this.iconAttributeService.getIconShape(this.state);
    }
    get iconStatus() {
        return this.iconAttributeService.getIconStatus(this.state);
    }
    get isProcessing() {
        return this.state === ClrTimelineStepState.PROCESSING;
    }
}
ClrTimelineStep.decorators = [
    { type: Component, args: [{
                selector: 'clr-timeline-step',
                template: `
    <ng-content select="clr-timeline-step-header"></ng-content>
    <span class="clr-sr-only">{{ stepTitleText }}</span>
    <ng-container *ngIf="!isProcessing; else processing">
      <cds-icon
        [attr.status]="iconStatus"
        [attr.shape]="iconShape"
        [attr.aria-label]="iconAriaLabel"
        [attr.aria-current]="iconAriaCurrent"
      >
      </cds-icon>
    </ng-container>
    <div class="clr-timeline-step-body">
      <ng-content select="clr-timeline-step-title"></ng-content>
      <ng-content select="clr-timeline-step-description"></ng-content>
    </div>

    <ng-template #processing>
      <clr-spinner clrMedium [attr.aria-label]="iconAriaLabel"></clr-spinner>
    </ng-template>
  `,
                host: { '[class.clr-timeline-step]': 'true' }
            },] }
];
ClrTimelineStep.ctorParameters = () => [
    { type: TimelineIconAttributeService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
ClrTimelineStep.propDecorators = {
    state: [{ type: Input, args: ['clrState',] }],
    stepTitle: [{ type: ContentChild, args: [ClrTimelineStepTitle, { read: ElementRef },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtc3RlcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2Nsci1hbmd1bGFyL3NyYy90aW1lbGluZS90aW1lbGluZS1zdGVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFaEcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDeEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDM0YsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUEyQnBELE1BQU0sT0FBTyxlQUFlO0lBTzFCLFlBQ1Usb0JBQWtELEVBQzdCLFVBQWU7UUFEcEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUE4QjtRQUM3QixlQUFVLEdBQVYsVUFBVSxDQUFLO1FBUjNCLFVBQUssR0FBeUIsb0JBQW9CLENBQUMsV0FBVyxDQUFDO0lBUy9FLENBQUM7SUFFSixrQkFBa0I7UUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN4RCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztTQUM3RDtJQUNILENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLG9CQUFvQixDQUFDLFVBQVUsQ0FBQztJQUN4RCxDQUFDOzs7WUE3REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQlQ7Z0JBQ0QsSUFBSSxFQUFFLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxFQUFFO2FBQzlDOzs7WUE1QlEsNEJBQTRCOzRDQXNDaEMsTUFBTSxTQUFDLFdBQVc7OztvQkFScEIsS0FBSyxTQUFDLFVBQVU7d0JBR2hCLFlBQVksU0FBQyxvQkFBb0IsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDbHJUaW1lbGluZVN0ZXBTdGF0ZSB9IGZyb20gJy4vZW51bXMvdGltZWxpbmUtc3RlcC1zdGF0ZS5lbnVtJztcbmltcG9ydCB7IFRpbWVsaW5lSWNvbkF0dHJpYnV0ZVNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy90aW1lbGluZS1pY29uLWF0dHJpYnV0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENsclRpbWVsaW5lU3RlcFRpdGxlIH0gZnJvbSAnLi90aW1lbGluZS1zdGVwLXRpdGxlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLXRpbWVsaW5lLXN0ZXAnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImNsci10aW1lbGluZS1zdGVwLWhlYWRlclwiPjwvbmctY29udGVudD5cbiAgICA8c3BhbiBjbGFzcz1cImNsci1zci1vbmx5XCI+e3sgc3RlcFRpdGxlVGV4dCB9fTwvc3Bhbj5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWlzUHJvY2Vzc2luZzsgZWxzZSBwcm9jZXNzaW5nXCI+XG4gICAgICA8Y2RzLWljb25cbiAgICAgICAgW2F0dHIuc3RhdHVzXT1cImljb25TdGF0dXNcIlxuICAgICAgICBbYXR0ci5zaGFwZV09XCJpY29uU2hhcGVcIlxuICAgICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cImljb25BcmlhTGFiZWxcIlxuICAgICAgICBbYXR0ci5hcmlhLWN1cnJlbnRdPVwiaWNvbkFyaWFDdXJyZW50XCJcbiAgICAgID5cbiAgICAgIDwvY2RzLWljb24+XG4gICAgPC9uZy1jb250YWluZXI+XG4gICAgPGRpdiBjbGFzcz1cImNsci10aW1lbGluZS1zdGVwLWJvZHlcIj5cbiAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImNsci10aW1lbGluZS1zdGVwLXRpdGxlXCI+PC9uZy1jb250ZW50PlxuICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiY2xyLXRpbWVsaW5lLXN0ZXAtZGVzY3JpcHRpb25cIj48L25nLWNvbnRlbnQ+XG4gICAgPC9kaXY+XG5cbiAgICA8bmctdGVtcGxhdGUgI3Byb2Nlc3Npbmc+XG4gICAgICA8Y2xyLXNwaW5uZXIgY2xyTWVkaXVtIFthdHRyLmFyaWEtbGFiZWxdPVwiaWNvbkFyaWFMYWJlbFwiPjwvY2xyLXNwaW5uZXI+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYCxcbiAgaG9zdDogeyAnW2NsYXNzLmNsci10aW1lbGluZS1zdGVwXSc6ICd0cnVlJyB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJUaW1lbGluZVN0ZXAge1xuICBASW5wdXQoJ2NsclN0YXRlJykgc3RhdGU6IENsclRpbWVsaW5lU3RlcFN0YXRlID0gQ2xyVGltZWxpbmVTdGVwU3RhdGUuTk9UX1NUQVJURUQ7XG5cbiAgcHVibGljIHN0ZXBUaXRsZVRleHQ6IHN0cmluZztcbiAgQENvbnRlbnRDaGlsZChDbHJUaW1lbGluZVN0ZXBUaXRsZSwgeyByZWFkOiBFbGVtZW50UmVmIH0pXG4gIHN0ZXBUaXRsZTogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGljb25BdHRyaWJ1dGVTZXJ2aWNlOiBUaW1lbGluZUljb25BdHRyaWJ1dGVTZXJ2aWNlLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55XG4gICkge31cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgaWYgKHRoaXMuc3RlcFRpdGxlICYmIGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHRoaXMuc3RlcFRpdGxlVGV4dCA9IHRoaXMuc3RlcFRpdGxlLm5hdGl2ZUVsZW1lbnQuaW5uZXJUZXh0O1xuICAgIH1cbiAgfVxuXG4gIGdldCBpY29uQXJpYUN1cnJlbnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENsclRpbWVsaW5lU3RlcFN0YXRlLkNVUlJFTlQ7XG4gIH1cblxuICBnZXQgaWNvbkFyaWFMYWJlbCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmljb25BdHRyaWJ1dGVTZXJ2aWNlLmdldEFyaWFMYWJlbCh0aGlzLnN0YXRlKTtcbiAgfVxuXG4gIGdldCBpY29uU2hhcGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pY29uQXR0cmlidXRlU2VydmljZS5nZXRJY29uU2hhcGUodGhpcy5zdGF0ZSk7XG4gIH1cblxuICBnZXQgaWNvblN0YXR1cygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmljb25BdHRyaWJ1dGVTZXJ2aWNlLmdldEljb25TdGF0dXModGhpcy5zdGF0ZSk7XG4gIH1cblxuICBnZXQgaXNQcm9jZXNzaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBDbHJUaW1lbGluZVN0ZXBTdGF0ZS5QUk9DRVNTSU5HO1xuICB9XG59XG4iXX0=