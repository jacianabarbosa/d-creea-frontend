/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
export class MultiSelectComboboxModel {
    containsItem(item) {
        return this.model ? this.model.includes(item) : false;
    }
    select(item) {
        this.addItem(item);
    }
    unselect(item) {
        this.removeItem(item);
    }
    isEmpty() {
        return !(this.model && this.model.length > 0);
    }
    pop() {
        let item;
        if (this.model && this.model.length > 0) {
            item = this.model[this.model.length - 1];
            this.removeItem(item);
        }
        return item;
    }
    toString(displayField, index = -1) {
        let displayString = '';
        if (this.model) {
            // If the model is array, we can use a specific item from it, to retrieve the display value.
            if (index > -1) {
                if (this.model[index]) {
                    // If we have a defined display field, we'll use it's value as display value
                    if (displayField && this.model[index][displayField]) {
                        displayString += this.model[index][displayField];
                    }
                    else {
                        // If we don't have a defined display field, we'll use the toString representation of the
                        // item as display value.
                        displayString += this.model[index].toString();
                    }
                }
            }
            else {
                this.model.forEach((model) => {
                    // If we have a defined display field, we'll use it's value as display value
                    if (displayField && model[displayField]) {
                        displayString += model[displayField];
                    }
                    else {
                        // If we don't have a defined display field, we'll use the toString representation of the
                        // model as display value.
                        displayString += model.toString();
                    }
                    displayString += ' ';
                });
            }
        }
        return displayString.trim();
    }
    addItem(item) {
        if (!this.containsItem(item)) {
            this.model = this.model || [];
            this.model.push(item);
        }
    }
    removeItem(item) {
        if (this.model === null || this.model === undefined) {
            return;
        }
        const index = this.model.indexOf(item);
        if (index > -1) {
            this.model.splice(index, 1);
        }
        // we intentionally set the model to null for form validation
        if (this.model.length === 0) {
            this.model = null;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWNvbWJvYm94Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2xyLWFuZ3VsYXIvc3JjL2Zvcm1zL2NvbWJvYm94L21vZGVsL211bHRpLXNlbGVjdC1jb21ib2JveC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBSUgsTUFBTSxPQUFPLHdCQUF3QjtJQUduQyxZQUFZLENBQUMsSUFBTztRQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDeEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFPO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQU87UUFDZCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsR0FBRztRQUNELElBQUksSUFBSSxDQUFDO1FBQ1QsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsUUFBUSxDQUFDLFlBQXFCLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUN4QyxJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFFdkIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsNEZBQTRGO1lBQzVGLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNkLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDckIsNEVBQTRFO29CQUM1RSxJQUFJLFlBQVksSUFBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFO3dCQUM1RCxhQUFhLElBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztxQkFDM0Q7eUJBQU07d0JBQ0wseUZBQXlGO3dCQUN6Rix5QkFBeUI7d0JBQ3pCLGFBQWEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO3FCQUMvQztpQkFDRjthQUNGO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBUSxFQUFFLEVBQUU7b0JBQzlCLDRFQUE0RTtvQkFDNUUsSUFBSSxZQUFZLElBQUssS0FBYSxDQUFDLFlBQVksQ0FBQyxFQUFFO3dCQUNoRCxhQUFhLElBQUssS0FBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO3FCQUMvQzt5QkFBTTt3QkFDTCx5RkFBeUY7d0JBQ3pGLDBCQUEwQjt3QkFDMUIsYUFBYSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztxQkFDbkM7b0JBQ0QsYUFBYSxJQUFJLEdBQUcsQ0FBQztnQkFDdkIsQ0FBQyxDQUFDLENBQUM7YUFDSjtTQUNGO1FBRUQsT0FBTyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVPLE9BQU8sQ0FBQyxJQUFPO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRU8sVUFBVSxDQUFDLElBQU87UUFDeEIsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUNuRCxPQUFPO1NBQ1I7UUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM3QjtRQUVELDZEQUE2RDtRQUM3RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztTQUNuQjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbWJvYm94TW9kZWwgfSBmcm9tICcuL2NvbWJvYm94Lm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIE11bHRpU2VsZWN0Q29tYm9ib3hNb2RlbDxUPiBpbXBsZW1lbnRzIENvbWJvYm94TW9kZWw8VD4ge1xuICBtb2RlbDogVFtdO1xuXG4gIGNvbnRhaW5zSXRlbShpdGVtOiBUKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwgPyB0aGlzLm1vZGVsLmluY2x1ZGVzKGl0ZW0pIDogZmFsc2U7XG4gIH1cblxuICBzZWxlY3QoaXRlbTogVCk6IHZvaWQge1xuICAgIHRoaXMuYWRkSXRlbShpdGVtKTtcbiAgfVxuXG4gIHVuc2VsZWN0KGl0ZW06IFQpOiB2b2lkIHtcbiAgICB0aGlzLnJlbW92ZUl0ZW0oaXRlbSk7XG4gIH1cblxuICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhKHRoaXMubW9kZWwgJiYgdGhpcy5tb2RlbC5sZW5ndGggPiAwKTtcbiAgfVxuXG4gIHBvcCgpOiBUIHtcbiAgICBsZXQgaXRlbTtcbiAgICBpZiAodGhpcy5tb2RlbCAmJiB0aGlzLm1vZGVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGl0ZW0gPSB0aGlzLm1vZGVsW3RoaXMubW9kZWwubGVuZ3RoIC0gMV07XG4gICAgICB0aGlzLnJlbW92ZUl0ZW0oaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgdG9TdHJpbmcoZGlzcGxheUZpZWxkPzogc3RyaW5nLCBpbmRleCA9IC0xKTogc3RyaW5nIHtcbiAgICBsZXQgZGlzcGxheVN0cmluZyA9ICcnO1xuXG4gICAgaWYgKHRoaXMubW9kZWwpIHtcbiAgICAgIC8vIElmIHRoZSBtb2RlbCBpcyBhcnJheSwgd2UgY2FuIHVzZSBhIHNwZWNpZmljIGl0ZW0gZnJvbSBpdCwgdG8gcmV0cmlldmUgdGhlIGRpc3BsYXkgdmFsdWUuXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBpZiAodGhpcy5tb2RlbFtpbmRleF0pIHtcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgZGVmaW5lZCBkaXNwbGF5IGZpZWxkLCB3ZSdsbCB1c2UgaXQncyB2YWx1ZSBhcyBkaXNwbGF5IHZhbHVlXG4gICAgICAgICAgaWYgKGRpc3BsYXlGaWVsZCAmJiAodGhpcy5tb2RlbFtpbmRleF0gYXMgYW55KVtkaXNwbGF5RmllbGRdKSB7XG4gICAgICAgICAgICBkaXNwbGF5U3RyaW5nICs9ICh0aGlzLm1vZGVsW2luZGV4XSBhcyBhbnkpW2Rpc3BsYXlGaWVsZF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBkZWZpbmVkIGRpc3BsYXkgZmllbGQsIHdlJ2xsIHVzZSB0aGUgdG9TdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gICAgICAgICAgICAvLyBpdGVtIGFzIGRpc3BsYXkgdmFsdWUuXG4gICAgICAgICAgICBkaXNwbGF5U3RyaW5nICs9IHRoaXMubW9kZWxbaW5kZXhdLnRvU3RyaW5nKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1vZGVsLmZvckVhY2goKG1vZGVsOiBUKSA9PiB7XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGRlZmluZWQgZGlzcGxheSBmaWVsZCwgd2UnbGwgdXNlIGl0J3MgdmFsdWUgYXMgZGlzcGxheSB2YWx1ZVxuICAgICAgICAgIGlmIChkaXNwbGF5RmllbGQgJiYgKG1vZGVsIGFzIGFueSlbZGlzcGxheUZpZWxkXSkge1xuICAgICAgICAgICAgZGlzcGxheVN0cmluZyArPSAobW9kZWwgYXMgYW55KVtkaXNwbGF5RmllbGRdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgZGVmaW5lZCBkaXNwbGF5IGZpZWxkLCB3ZSdsbCB1c2UgdGhlIHRvU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuICAgICAgICAgICAgLy8gbW9kZWwgYXMgZGlzcGxheSB2YWx1ZS5cbiAgICAgICAgICAgIGRpc3BsYXlTdHJpbmcgKz0gbW9kZWwudG9TdHJpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGlzcGxheVN0cmluZyArPSAnICc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkaXNwbGF5U3RyaW5nLnRyaW0oKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkSXRlbShpdGVtOiBUKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRhaW5zSXRlbShpdGVtKSkge1xuICAgICAgdGhpcy5tb2RlbCA9IHRoaXMubW9kZWwgfHwgW107XG4gICAgICB0aGlzLm1vZGVsLnB1c2goaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVJdGVtKGl0ZW06IFQpIHtcbiAgICBpZiAodGhpcy5tb2RlbCA9PT0gbnVsbCB8fCB0aGlzLm1vZGVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMubW9kZWwuaW5kZXhPZihpdGVtKTtcblxuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLm1vZGVsLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLy8gd2UgaW50ZW50aW9uYWxseSBzZXQgdGhlIG1vZGVsIHRvIG51bGwgZm9yIGZvcm0gdmFsaWRhdGlvblxuICAgIGlmICh0aGlzLm1vZGVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5tb2RlbCA9IG51bGw7XG4gICAgfVxuICB9XG59XG4iXX0=