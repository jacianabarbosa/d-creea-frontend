{"version":3,"file":"form-group.element.js","sourceRoot":"","sources":["../../../../src/forms/form-group/form-group.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { LitElement, html } from 'lit-element';\nimport {\n  baseStyles,\n  querySlotAll,\n  property,\n  childrenUpdateComplete,\n  elementResize,\n  pxToRem,\n  syncDefinedProps,\n} from '@cds/core/internal';\nimport { CdsInternalControlGroup } from '../control-group/control-group.element.js';\nimport { CdsInternalControlInline } from '../control-inline/control-inline.element.js';\nimport { CdsControl } from '../control/control.element.js';\nimport { FormLayout, ControlWidth } from '../utils/interfaces.js';\nimport { getLargestPrimaryLabelWidth, isVerticalLayout, defaultFormLayout } from '../utils/index.js';\nimport { styles } from './form-group.element.css.js';\n\n/**\n * Form\n *\n * ```typescript\n * import '@cds/core/forms/register.js';\n * ```\n *\n * ```html\n * <cds-form-group layout=\"horizontal\">\n *   <cds-input>\n *     <label>Test</label>\n *     <input type=\"text\" />\n *   </cds-input>\n *\n *   <cds-input>\n *     <label>Test</label>\n *     <input type=\"text\" />\n *   </cds-input>\n * </cds-form-group>\n * ```\n *\n * @element cds-form-group\n * @slot - For projecting input controls\n */\nexport class CdsFormGroup extends LitElement {\n  /**\n   * @type {horizontal | horizontal-inline | vertical | vertical-inline | compact}\n   * Set to adjust the default control layout for all controls within form group.\n   * When `responsive` is true this will be the largest size to scale to.\n   */\n  @property({ type: String }) layout: FormLayout = defaultFormLayout;\n\n  /**\n   * @type {stretch | shrink}\n   * Adjust the control from the default full width or the browser default width\n   */\n  @property({ type: String }) controlWidth: ControlWidth; // no default given so child controls are not overridden unless explicity set by parent form group\n\n  /**\n   * By default forms will collapse to layout that prevents overflow.\n   * If disabled control layout may break or overflow in unexpected ways.\n   */\n  @property({ type: Boolean }) responsive = true;\n\n  /**\n   * Set the validate attribute to sync with HTML5 native validation\n   * https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation\n   */\n  @property({ type: Boolean }) validate = false;\n\n  @querySlotAll('[cds-control]') private controls: NodeListOf<CdsControl | CdsInternalControlInline>;\n\n  @querySlotAll('[cds-control-group]') private groups: NodeListOf<CdsInternalControlGroup>;\n\n  private get controlsAndGroups() {\n    return [...Array.from(this.groups), ...Array.from(this.controls)];\n  }\n\n  static get styles() {\n    return [baseStyles, styles];\n  }\n\n  render() {\n    return html`\n      <div class=\"private-host\" cds-layout=\"vertical gap:${this.layout === 'compact' ? 'md' : 'lg'}\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  private overflowElement: CdsControl | null;\n\n  firstUpdated(props: Map<string, any>) {\n    super.firstUpdated(props);\n    this.syncLayouts();\n    this.setControlLabelWidths();\n  }\n\n  updated(props: Map<string, any>) {\n    super.updated(props);\n    syncDefinedProps(props, this, this.controlsAndGroups);\n  }\n\n  private async setControlLabelWidths() {\n    await childrenUpdateComplete(this.controlsAndGroups);\n    this.style.setProperty('--internal-label-min-width', await getLargestPrimaryLabelWidth(this.controlsAndGroups));\n    elementResize(this, () =>\n      this.style.setProperty('--internal-label-max-width', pxToRem(this.getBoundingClientRect().width))\n    );\n  }\n\n  private syncLayouts() {\n    this.addEventListener<any>('layoutChange', (e: CustomEvent) => {\n      e.preventDefault();\n\n      if (!this.overflowElement && isVerticalLayout(e.detail)) {\n        this.collapseForm(e.target as CdsControl);\n      }\n\n      if (e.target === this.overflowElement && !isVerticalLayout(e.detail)) {\n        this.expandForm(e.detail);\n      }\n    });\n  }\n\n  private collapseForm(control: CdsControl) {\n    this.overflowElement = control;\n    this.responsive = false;\n    this.layout = 'vertical';\n    control.updateComplete.then(() => (control.responsive = true));\n  }\n\n  private expandForm(layout: FormLayout) {\n    this.responsive = true;\n    this.overflowElement = null;\n    this.layout = layout;\n  }\n}\n"]}