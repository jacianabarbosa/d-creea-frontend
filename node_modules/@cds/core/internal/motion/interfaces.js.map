{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../src/internal/motion/interfaces.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,aAAa;AAEb,MAAM,CAAN,IAAY,eAKX;AALD,WAAY,eAAe;IACzB,kCAAe,CAAA;IACf,oCAAiB,CAAA;IACjB,qCAAkB,CAAA;IAClB,+BAAY,CAAA;AACd,CAAC,EALW,eAAe,KAAf,eAAe,QAK1B;AAED,MAAM,CAAC,MAAM,mCAAmC,GAAG,QAAQ,CAAC;AAC5D,MAAM,CAAC,MAAM,sCAAsC,GAAG,SAAS,CAAC;AAChE,MAAM,CAAC,MAAM,uCAAuC,GAAG,GAAG,GAAG,sCAAsC,CAAC;AACpG,MAAM,CAAC,MAAM,sCAAsC,GAAG,GAAG,CAAC;AAC1D,MAAM,CAAC,MAAM,8BAA8B,GAAG,QAAQ,CAAC;AAEvD,MAAM,CAAC,MAAM,kCAAkC,GAAG,uBAAuB,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { EventEmitter } from '../decorators/event';\n\n/* GLOBALS */\n\nexport enum AnimationStatus {\n  ready = 'ready',\n  active = 'active',\n  start = 'starting',\n  end = 'done',\n}\n\nexport const CLARITY_MOTION_ENTER_LEAVE_PROPERTY = 'hidden';\nexport const CLARITY_MOTION_REVERSE_ANIMATION_LABEL = 'reverse';\nexport const CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX = '-' + CLARITY_MOTION_REVERSE_ANIMATION_LABEL;\nexport const CLARITY_MOTION_FALLBACK_DURATION_IN_MS = 300;\nexport const CLARITY_MOTION_FALLBACK_EASING = 'linear';\n\nexport const PRIVATE_ANIMATION_STATUS_ATTR_NAME = '_cds-animation-status';\n\n/* ANIMATION CONFIGURATION */\n\n// a type to use in the { options } property of an animation configuration\nexport type AnimationOptions = { [key: string]: string | number };\nexport type AnimationKeyframes = Keyframe[] | PropertyIndexedKeyframes;\n\n// this is the actual animation. it goes in the Clarity Motion configs\n// { 'cds-modal-enter': TargetedAnimation[] }\nexport interface TargetedAnimation {\n  target?: string;\n  onlyIf?: string;\n  animation: AnimationKeyframes;\n  options?: KeyframeAnimationOptions;\n  playback?: { reverse?: boolean };\n}\n\n// this goes into @animate's config\n// { 'property-attribute-name': {} as TargetedAnimationByPropertyValue }\nexport interface TargetedAnimationByPropertyValue {\n  [key: string]: string; // property value-as-string associated with one or more animations targeted to selectors\n}\n\nexport type TargetedAnimationAsPropertyTuple = [string, TargetedAnimationByPropertyValue];\n\nexport interface PropertyDrivenAnimation {\n  // property name\n  [key: string]: TargetedAnimationByPropertyValue;\n}\n\nexport interface AnimationConfig {\n  [key: string]: TargetedAnimation[];\n}\n\n/* ANIMATION REGISTRY */\n\nexport interface MotionRegistry {\n  [key: string]: TargetedAnimation[];\n}\n\n/* ANIMATED COMPONENTS */\n\nexport interface Animatable {\n  cdsMotion: string;\n  cdsMotionChange: EventEmitter<string>;\n}\n\nexport type AnimatableElement = Element & Animatable & { [key: string]: any; _animations: PropertyDrivenAnimation };\n"]}