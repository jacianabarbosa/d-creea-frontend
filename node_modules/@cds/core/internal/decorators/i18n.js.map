{"version":3,"file":"i18n.js","sourceRoot":"","sources":["../../../../src/internal/decorators/i18n.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAEvC,sBAAsB;AACtB,SAAS,UAAU,CAAC,UAA8B,EAAE,iBAAqB,EAAE,IAAiB;IAC1F,MAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC,iBAAiB,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;IACxE,OAAO,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACvE,CAAC;AAED,2BAA2B;AAC3B,SAAS,YAAY,CAAC,UAA8B,EAAE,OAAwB;IAC5E,MAAM,IAAI,GAAG;QACX,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,WAAW;QACtB,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,UAAU;KACX,CAAC;IAEF,OAAO,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;AAC1C,CAAC;AAQD;;;;;;;;;;;;;;;GAeG;AACH,MAAM,UAAU,IAAI;IAClB,OAAO,CAAC,iBAAsB,EAAE,IAAY,EAAO,EAAE;QACnD,MAAM,UAAU,GAAG;YACjB,GAAG;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC;YACrB,CAAC;YACD,GAAG,CAAoB,KAAS;gBAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;oBAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;iBACrB;qBAAM;oBACL,IAAI,CAAC,MAAM,mCAAQ,IAAI,CAAC,MAAM,GAAK,KAAK,CAAE,CAAC;iBAC5C;YACH,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QAEF,OAAO,IAAI,KAAK,SAAS;YACvB,CAAC,CAAC,UAAU,CAAC,UAAU,EAAE,iBAAiB,EAAE,IAAI,CAAC;YACjD,CAAC,CAAC,YAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAClD,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { property } from 'lit-element';\n\n// Legacy TS Decorator\nfunction legacyI18n(descriptor: PropertyDescriptor, protoOrDescriptor: {}, name: PropertyKey) {\n  const desc = Object.defineProperty(protoOrDescriptor, name, descriptor);\n  return property({ type: Object, attribute: 'cds-i18n' })(desc, name);\n}\n\n// TC39 Decorators proposal\nfunction standardI18n(descriptor: PropertyDescriptor, element: { key: string }) {\n  const desc = {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n  };\n\n  return property({ type: Object })(desc);\n}\n\n/**\n * This decorator stores the i18n strings in a private variable __i18n.\n * Due to TypeScript decorators being dynamic a type cast is needed here.\n */\ntype I18nElement = HTMLElement & { __i18n: {} };\n\n/**\n * A property decorator which accesses a set of string values for use\n * inside the element's template. The values can be overridden at runtime\n * by changing the property value that's reflected through the attribute value.\n *\n * @example\n *\n *     class MyElement {\n *       @i18n()\n *       i18n = {\n *         \"open\" : \"Open my element\",\n *         \"close\" : \"Close my element\"\n *       };\n *     }\n *\n */\nexport function i18n() {\n  return (protoOrDescriptor: any, name: string): any => {\n    const descriptor = {\n      get(this: I18nElement) {\n        return this.__i18n;\n      },\n      set(this: I18nElement, value: {}) {\n        if (!this.__i18n) {\n          this.__i18n = value;\n        } else {\n          this.__i18n = { ...this.__i18n, ...value };\n        }\n      },\n      enumerable: true,\n      configurable: true,\n    };\n\n    return name !== undefined\n      ? legacyI18n(descriptor, protoOrDescriptor, name)\n      : standardI18n(descriptor, protoOrDescriptor);\n  };\n}\n"]}