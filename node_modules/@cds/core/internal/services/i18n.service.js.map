{"version":3,"file":"i18n.service.js","sourceRoot":"","sources":["../../../../src/internal/services/i18n.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAiCH,MAAM,CAAC,MAAM,uBAAuB,GAAG;IACrC,KAAK,EAAE;QACL,oBAAoB,EAAE,OAAO;QAC7B,OAAO,EAAE,SAAS;QAClB,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,SAAS;QAClB,OAAO,EAAE,SAAS;QAClB,MAAM,EAAE,OAAO;KAChB;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;KACb;IACD,IAAI,EAAE;QACJ,MAAM,EAAE,QAAQ;QAChB,KAAK,EAAE,OAAO;QACd,UAAU,EAAE,aAAa;KAC1B;IACD,KAAK,EAAE;QACL,oBAAoB,EAAE,aAAa;QACnC,YAAY,EAAE,4BAA4B;QAC1C,UAAU,EAAE,uBAAuB;QACnC,UAAU,EAAE,sBAAsB;KACnC;IACD,QAAQ,EAAE;QACR,mBAAmB,EAAE,eAAe;QACpC,mBAAmB,EAAE,eAAe;KACrC;CACF,CAAC;AASF;;;;;;;;GAQG;AACH,MAAM,OAAO,WAAW;IAGtB,MAAM,KAAK,IAAI;QACb,OAAO,WAAW,CAAC,OAAO,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,SAAwC;QACtD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACxC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,mCAAQ,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,GAAK,SAAS,CAAC,GAAG,CAAC,CAAE,CAAC;SAC/E;IACH,CAAC;;AAVc,mBAAO,qBAAqB,uBAAuB,EAAG","sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nexport interface I18nStrings {\n  [key: string]: { [key: string]: string | undefined };\n\n  alert: {\n    closeButtonAriaLabel: string;\n    loading: string;\n    info: string;\n    success: string;\n    warning: string;\n    danger: string;\n  };\n  dropdown: {\n    open: string;\n  };\n  file: {\n    browse: string;\n    files: string;\n    removeFile: string;\n  };\n  modal: {\n    closeButtonAriaLabel: string;\n    contentStart: string;\n    contentBox: string;\n    contentEnd: string;\n  };\n  password: {\n    showButtonAriaLabel: string;\n    hideButtonAriaLabel: string;\n  };\n}\n\nexport const componentStringsDefault = {\n  alert: {\n    closeButtonAriaLabel: 'Close',\n    loading: 'Loading',\n    info: 'Info',\n    success: 'Success',\n    warning: 'Warning',\n    danger: 'Error',\n  },\n  dropdown: {\n    open: 'Open',\n  },\n  file: {\n    browse: 'browse',\n    files: 'files',\n    removeFile: 'remove file',\n  },\n  modal: {\n    closeButtonAriaLabel: 'Close modal',\n    contentStart: 'Beginning of Modal Content',\n    contentBox: 'Scrollable Modal Body',\n    contentEnd: 'End of Modal Content',\n  },\n  password: {\n    showButtonAriaLabel: 'Show password',\n    hideButtonAriaLabel: 'Hide password',\n  },\n};\n\n/**\n * We want the user to be able to not only override a subset of the keys (e.g. only override strings\n * for aalert) but also be able to override a subset of values for that key (e.g. only override\n * the closeButtonAriaLabel). This type is defined here for the localize method in the I18nService.\n */\ntype PartialRecursive<T> = T extends object ? { [K in keyof T]?: PartialRecursive<T[K]> } : T;\n\n/**\n * I18nService is a static class that gives users the ability to use and override\n * strings within the components for internationalization / globalization. One\n * can override default values globally for their application or override per\n * component instance as needed.\n *\n * Use the localize method to override values globally. For per component instance,\n * use the i18n decorator.\n */\nexport class I18nService {\n  private static strings: I18nStrings = { ...componentStringsDefault };\n\n  static get keys(): Readonly<I18nStrings> {\n    return I18nService.strings;\n  }\n\n  static localize(overrides: PartialRecursive<I18nStrings>) {\n    for (const key of Object.keys(overrides)) {\n      I18nService.strings[key] = { ...I18nService.strings[key], ...overrides[key] };\n    }\n  }\n}\n"]}