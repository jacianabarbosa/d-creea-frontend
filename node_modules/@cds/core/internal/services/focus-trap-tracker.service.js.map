{"version":3,"file":"focus-trap-tracker.service.js","sourceRoot":"","sources":["../../../../src/internal/services/focus-trap-tracker.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,yBAAyB,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAC3E,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAE9C;;;GAGG;AAEH,MAAM,CAAC,MAAM,sBAAsB,GAAG,eAAe,CAAC;AACtD,MAAM,CAAC,MAAM,4BAA4B,GAAG,oBAAoB,CAAC;AAEjE,MAAM,OAAO,gBAAgB;IAC3B,MAAM,CAAC,UAAU;QACf,OAAO,QAAQ,CAAC,eAA8B,CAAC;IACjD,CAAC;IAED,MAAM,CAAC,UAAU;QACf,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAElC,IAAI,yBAAyB,CAAC,OAAO,EAAE,4BAA4B,CAAC,EAAE;YACpE,0GAA0G;YAC1G,MAAM,WAAW,GAAG,OAAO,CAAC,YAAY,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAC;YAC7E,wFAAwF;YACxF,OAAO,WAAW,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACzD;aAAM;YACL,OAAO,EAAE,CAAC;SACX;IACH,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,OAAiB;QACjC,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QACjE,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,4BAA4B,EAAE,SAAS,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,QAAgB;QAChC,IAAI,QAAQ,KAAK,EAAE,EAAE;YACnB,OAAO;SACR;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAElC,kEAAkE;QAClE,sEAAsE;QACtE,kCAAkC;QAClC,IAAI,SAAS,CAAC,OAAO,CAAC,KAAK,QAAQ,EAAE;YACnC,OAAO;SACR;QAED,MAAM,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,aAAa,GAAG,CAAC,CAAC,EAAE;YACtB,OAAO,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;SAClC;QAED,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,uBAAuB;QAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,OAAO,CAAC,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,gBAAgB;QACrB,OAAO,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,UAAU;QACf,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAE1C,IAAI,SAAS,KAAK,EAAE,EAAE;YACpB,OAAO,OAAO,CAAC,aAAa,CAAC,IAAI,sBAAsB,KAAK,SAAS,IAAI,CAAC,CAAC;SAC5E;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { hasAttributeAndIsNotEmpty, setAttributes } from '../utils/dom.js';\nimport { arrayTail } from '../utils/array.js';\n\n/**\n * FocusTrapTracker is a static class that keeps track of the active element with focus trap,\n * in case there are multiple in a given page.\n */\n\nexport const CDS_FOCUS_TRAP_ID_ATTR = 'focus-trap-id';\nexport const CDS_FOCUS_TRAP_DOCUMENT_ATTR = 'cds-focus-trap-ids';\n\nexport class FocusTrapTracker {\n  static getDocroot(): HTMLElement {\n    return document.documentElement as HTMLElement;\n  }\n\n  static getTrapIds(): string[] {\n    const docroot = this.getDocroot();\n\n    if (hasAttributeAndIsNotEmpty(docroot, CDS_FOCUS_TRAP_DOCUMENT_ATTR)) {\n      // the function in the conditional handles all nil references. zero chance of null making it through here.\n      const myAttribute = docroot.getAttribute(CDS_FOCUS_TRAP_DOCUMENT_ATTR) || '';\n      // TS forcing us to write an unreachable codepath. this is where monads would be useful.\n      return myAttribute === '' ? [] : myAttribute.split(' ');\n    } else {\n      return [];\n    }\n  }\n\n  static setTrapIds(trapIds: string[]): void {\n    const myTrapIds = trapIds.length > 0 ? trapIds.join(' ') : false;\n    setAttributes(this.getDocroot(), [CDS_FOCUS_TRAP_DOCUMENT_ATTR, myTrapIds]);\n  }\n\n  static setCurrent(myTrapId: string): void {\n    if (myTrapId === '') {\n      return;\n    }\n\n    const trapIds = this.getTrapIds();\n\n    // this is a just-in-case situation. we should never encounter it.\n    // but in the event that we do, this guard will ensure no id is in the\n    // focus trap list more than once.\n    if (arrayTail(trapIds) === myTrapId) {\n      return;\n    }\n\n    const existingIndex = trapIds.indexOf(myTrapId);\n    if (existingIndex > -1) {\n      trapIds.splice(existingIndex, 1);\n    }\n\n    trapIds.push(myTrapId);\n    this.setTrapIds(trapIds);\n  }\n\n  static activatePreviousCurrent(): void {\n    const trapIds = this.getTrapIds();\n    trapIds.pop();\n    this.setTrapIds(trapIds);\n  }\n\n  static getCurrentTrapId(): string {\n    return arrayTail(this.getTrapIds()) || '';\n  }\n\n  static getCurrent(): HTMLElement | null {\n    const docroot = this.getDocroot();\n    const currentId = this.getCurrentTrapId();\n\n    if (currentId !== '') {\n      return docroot.querySelector(`[${CDS_FOCUS_TRAP_ID_ATTR}=\"${currentId}\"]`);\n    } else {\n      return null;\n    }\n  }\n}\n"]}