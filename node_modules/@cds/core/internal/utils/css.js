/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { LogService } from '../services/log.service.js';
import { isString } from './identity.js';
export function hasClassnames(el, ...classNames) {
    return classNames.filter((cn) => el.classList.contains(cn)).length === classNames.length;
}
export function addClassnames(el, ...classNames) {
    classNames.forEach((cn) => {
        el.classList.add(cn);
    });
    return el;
}
export function removeClassnames(el, ...classNames) {
    classNames.forEach((cn) => {
        el.classList.remove(cn);
    });
    return el;
}
export function removeClassnamesUnless(el, classnamesToRemove, classnamesToKeep) {
    const filteredClassnamesToRemove = classnamesToRemove.filter(cn => classnamesToKeep.indexOf(cn) < 0);
    return removeClassnames(el, ...filteredClassnamesToRemove);
}
export function updateElementStyles(el, ...styleTuples) {
    styleTuples.forEach(([styleKey, value]) => {
        el.style[styleKey] = value;
    });
    return el;
}
export function pxToRem(pxValue) {
    let base = parseInt(document.documentElement.getAttribute('cds-base-font'));
    if (!base) {
        const prop = window
            .getComputedStyle(document.body, null)
            .getPropertyValue('--cds-global-typography-base-font-size');
        base = (16 * parseInt(prop !== '' ? prop : '100%')) / 100;
        document.documentElement.setAttribute('cds-base-font', `${base}`);
    }
    return `${pxValue / base}rem`;
}
export function getCssPropertyValue(propertyName, el = document.body, pseudoSelectorModifier = null) {
    try {
        return getComputedStyle(el, pseudoSelectorModifier).getPropertyValue(propertyName).trim();
    }
    catch (e) {
        LogService.warn('Container element passed to getCustomPropertyValue must be an element.');
        return '';
    }
}
export function isCssPropertyName(str) {
    return !!str && isString(str) && str.slice(0, 2) === '--';
}
//# sourceMappingURL=css.js.map