{"version":3,"file":"global.js","sourceRoot":"","sources":["../../../../src/internal/utils/global.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,aAAa,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AACxG,OAAO,EAAwB,eAAe,EAAE,MAAM,eAAe,CAAC;AACtE,OAAO,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AAmCxD,MAAM,UAAU,cAAc;IAC5B,IAAI,SAAS,EAAE,EAAE;QACf,mBAAmB,EAAE,CAAC;QACtB,iBAAiB,EAAE,CAAC;KACrB;AACH,CAAC;AAED,SAAS,UAAU;IACjB,MAAM,GAAG,GAAW;QAClB,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ;QAC7B,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,WAAW;QACnC,SAAS,EAAE,SAAS,CAAC,SAAS;QAC9B,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,SAAS;QAC9B,cAAc,EAAE,iBAAiB,CAAC,KAAK,CAAC;QACxC,gBAAgB,EAAE,mBAAmB,CAAC,KAAK,CAAC;QAC5C,YAAY,EAAE,eAAe,CAAC,KAAK,CAAC;QACpC,UAAU,EAAE,aAAa,CAAC,KAAK,CAAC;QAChC,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,eAAe;KAC3C,CAAC;IACF,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,UAAU;IACjB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC;AAED,SAAS,mBAAmB;IAC1B,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,IAAI;QACzB,QAAQ,EAAE,EAAE;QACZ,eAAe,EAAE,EAAE;QACnB,MAAM,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE;QAC9B,SAAS,EAAE,eAAe,CAAC,QAAQ;QACnC,WAAW,EAAE;YACX,UAAU,EAAE,KAAK;SAClB;QACD,UAAU;QACV,UAAU;KACX,CAAC;AACJ,CAAC;AAED,SAAS,iBAAiB;IACxB,MAAM,aAAa,GAAG,UAAU,CAAC;IACjC,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;QAClD,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KACzC;IAEA,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAiB,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAEpG,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;QAClC,UAAU,CAAC,IAAI,CACb,iHAAiH,CAClH,CAAC;KACH;AACH,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { isBrowser } from './exists.js';\nimport { getAngularVersion, getReactVersion, getVueVersion, getAngularJSVersion } from './framework.js';\nimport { FeatureSupportMatrix, browserFeatures } from './supports.js';\nimport { LogService } from '../services/log.service.js';\n\nexport interface CDSGlobal {\n  _version: string[];\n  _loadedElements: string[];\n  _react: { version: string }; // set by @cds/react\n  _supports: FeatureSupportMatrix;\n  getVersion: () => CDSLog;\n  logVersion: () => void;\n  environment: {\n    /** Set to true for production env to disable dev time logging and tooling */\n    production: boolean;\n  };\n}\n\nexport interface CDSLog {\n  versions: string[];\n  loadedElements: string[];\n  userAgent: string;\n  supports: {};\n  angularVersion?: string | undefined;\n  angularJSVersion?: string | undefined;\n  reactVersion?: string | undefined;\n  vueVersion?: string | undefined;\n  environment: {\n    production: boolean;\n  };\n}\n\ndeclare global {\n  interface Window {\n    CDS: CDSGlobal;\n  }\n}\n\nexport function setupCDSGlobal() {\n  if (isBrowser()) {\n    initializeCDSGlobal();\n    setRunningVersion();\n  }\n}\n\nfunction getVersion() {\n  const log: CDSLog = {\n    versions: window.CDS._version,\n    environment: window.CDS.environment,\n    userAgent: navigator.userAgent,\n    supports: window.CDS._supports,\n    angularVersion: getAngularVersion(false),\n    angularJSVersion: getAngularJSVersion(false),\n    reactVersion: getReactVersion(false),\n    vueVersion: getVueVersion(false),\n    loadedElements: window.CDS._loadedElements,\n  };\n  return log;\n}\n\nfunction logVersion() {\n  console.log(JSON.stringify(getVersion(), null, 2));\n}\n\nfunction initializeCDSGlobal() {\n  window.CDS = window.CDS || {\n    _version: [],\n    _loadedElements: [],\n    _react: { version: undefined },\n    _supports: browserFeatures.supports,\n    environment: {\n      production: false,\n    },\n    getVersion,\n    logVersion,\n  };\n}\n\nfunction setRunningVersion() {\n  const loadedVersion = '@VERSION';\n  if (window.CDS._version.indexOf(loadedVersion) < 0) {\n    window.CDS._version.push(loadedVersion);\n  }\n\n  (document.querySelector('body') as HTMLElement).setAttribute('cds-version', window.CDS._version[0]);\n\n  if (window.CDS._version.length > 1) {\n    LogService.warn(\n      'Running more than one version of Clarity can cause unexpected issues. Please ensure only one version is loaded.'\n    );\n  }\n}\n"]}