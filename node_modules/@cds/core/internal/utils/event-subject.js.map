{"version":3,"file":"event-subject.js","sourceRoot":"","sources":["../../../../src/internal/utils/event-subject.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAMH;;;GAGG;AACH,MAAM,yBAAyB;IAC7B,YAAmB,EAAwB,EAAU,aAA0C;QAA5E,OAAE,GAAF,EAAE,CAAsB;QAAU,kBAAa,GAAb,aAAa,CAA6B;IAAG,CAAC;IAEnG,+DAA+D;IAC/D,WAAW;QACT,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YAChB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACrC;IACH,CAAC;CACF;AAED;;;;;;;;;;GAUG;AACH,MAAM,OAAO,YAAY;IAAzB;QACU,kBAAa,GAAgC,EAAE,CAAC;IAkB1D,CAAC;IAhBC,+CAA+C;IAC/C,SAAS,CAAC,EAAsB;QAC9B,MAAM,GAAG,GAAG,IAAI,yBAAyB,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAClE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,OAAO,GAAwB,CAAC;IAClC,CAAC;IAED,iEAAiE;IACjE,IAAI,CAAC,KAAQ;QACX,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,qEAAqE;IACrE,iBAAiB;QACf,OAAQ,IAAsC,CAAC;IACjD,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nexport interface EventSubscription extends Pick<InternalEventSubscription, 'unsubscribe'> {} // eslint-disable-line @typescript-eslint/no-empty-interface\n\nexport interface EventObservable<T> extends Pick<EventSubject<T>, 'subscribe'> {} // eslint-disable-line @typescript-eslint/no-empty-interface\n\n/**\n * Subscription returned from EventSubject.\n * Enables subscriber to un-subscribe from source.\n */\nclass InternalEventSubscription {\n  constructor(public fn: (value: any) => void, private subscriptions: InternalEventSubscription[]) {}\n\n  /** Use during disconnectedCallback to stop receiving events */\n  unsubscribe() {\n    const index = this.subscriptions.indexOf(this);\n    if (index !== -1) {\n      this.subscriptions.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Basic Subject implementing Observer style pattern.\n * Use to trigger and communicate outgoing async updates.\n *\n * Used as a lightweight alternative to rxjs style subject.\n * RxJS pulls in too much code for our performance standards\n * and would require additional peer dependencies for the\n * host application to take on.\n *\n * @internal\n */\nexport class EventSubject<T> {\n  private subscriptions: InternalEventSubscription[] = [];\n\n  /** Subscribe to receive event value updates */\n  subscribe(fn: (value: T) => void) {\n    const sub = new InternalEventSubscription(fn, this.subscriptions);\n    this.subscriptions.push(sub);\n    return sub as EventSubscription;\n  }\n\n  /** Use to trigger and send an event to all active subscribers */\n  emit(value: T) {\n    this.subscriptions.forEach(sub => sub.fn(value));\n  }\n\n  /** Cast Subject to Observable subtype to prevent access to `emit` */\n  toEventObservable() {\n    return (this as unknown) as EventObservable<T>;\n  }\n}\n"]}