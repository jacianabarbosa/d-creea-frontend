{"version":3,"file":"button.element.js","sourceRoot":"","sources":["../../../src/button/button.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { baseStyles, CdsBaseButton, getElementWidth, property, spanWrapper } from '@cds/core/internal';\nimport { ClarityIcons } from '@cds/core/icon/icon.service.js';\nimport { errorStandardIcon } from '@cds/core/icon/shapes/error-standard.js';\nimport { checkIcon } from '@cds/core/icon/shapes/check.js';\nimport { html, query } from 'lit-element';\nimport { styles as baseButtonStyles } from './base-button.element.css.js';\nimport { styles } from './button.element.css.js';\n\nexport const iconSpinner = (size: string) => {\n  const spinnerSize = size === 'sm' ? '12' : '18';\n  return html`<span class=\"button-status-icon\" cds-layout=\"horizontal align:center\"><cds-progress-circle class=\"button-spinner\" size=\"${spinnerSize}\" status=\"info\"></cds-progress-circle></span></span>`;\n};\n\nexport const iconCheck = html`<span class=\"button-status-icon\" cds-layout=\"horizontal align:center\"\n  ><cds-icon shape=\"check\" status=\"success\" cds-layout=\"align:center\"></cds-icon\n></span>`;\n\nexport const iconError = html`<span class=\"button-status-icon\" cds-layout=\"horizontal align:center\"\n  ><cds-icon shape=\"error-standard\" cds-layout=\"align:center\"></cds-icon\n></span>`;\n\nexport const enum ClrLoadingState {\n  default = 'default',\n  loading = 'loading',\n  success = 'success',\n  error = 'error',\n}\n\n/**\n * Buttons allow an application to communicate action and direct user intent.\n *\n * ```typescript\n * import '@cds/core/button/register.js';\n * ```\n *\n * ```html\n * <cds-button>submit</cds-button>\n * ```\n *\n * @element cds-button\n * @slot - Content slot for inside the button\n * @cssprop --background\n * @cssprop --border-color\n * @cssprop --border-radius\n * @cssprop --border-width\n * @cssprop --box-shadow-color\n * @cssprop --color\n * @cssprop --font-family\n * @cssprop --font-size\n * @cssprop --font-weight\n * @cssprop --height\n * @cssprop --letter-spacing\n * @cssprop --min-width\n * @cssprop --padding\n * @cssprop --text-decoration\n * @cssprop --text-transform\n */\nexport class CdsButton extends CdsBaseButton {\n  /**\n   * Define the type of action the button triggers\n   *\n   * - `solid`: buttons direct the userâ€™s attention to the primary action the application is suggesting that the user take.\n   * - `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n   * - `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.\n   */\n  @property({ type: String })\n  action: 'solid' | 'outline' | 'flat' = 'solid';\n\n  /**\n   * Sets the color of the button to match the following string statuses\n   */\n  @property({ type: String })\n  status: 'primary' | 'success' | 'warning' | 'danger' | 'inverse' = 'primary';\n\n  /**\n   * Sets the overall height and width of the button based on the following string values:\n   */\n  @property({ type: String })\n  size: 'sm' | 'md' = 'md';\n\n  /** Sets if the button should be full width with display block */\n  @property({ type: Boolean })\n  block = false;\n\n  @query('.private-host') privateHost: HTMLElement;\n\n  /**\n   * @type {default | loading | success | error}\n   * Changes the button content based on the value passed.\n   *\n   * - `default`: shows the content of the button\n   * - `loading`: disables the button and shows a spinner inside the button\n   * - `success`: disables the button and shows a check mark inside the button; auto-triggers to change back to DEFAULT state after 1000 ms\n   * - `error`: shows the content of the button (in the context of application, this state is usually entered from a LOADING state. the application should show appropriate error message)\n   */\n  @property({ type: String })\n  loadingState: keyof typeof ClrLoadingState = ClrLoadingState.default;\n\n  constructor() {\n    super();\n    ClarityIcons.addIcons(errorStandardIcon, checkIcon);\n  }\n\n  firstUpdated(props: Map<string, any>) {\n    super.firstUpdated(props);\n\n    // Find and wrap any text nodes into span elements\n    spanWrapper(this.childNodes);\n\n    if (this.loadingState !== ClrLoadingState.default) {\n      this.updateLoadingState();\n    }\n  }\n\n  update(props: Map<string, any>) {\n    if (this.privateHost && props.has('loadingState')) {\n      this.updateLoadingState();\n    }\n    super.update(props);\n  }\n\n  render() {\n    const loadingState = this.loadingState;\n    return html`<div class=\"private-host\">\n      <div cds-layout=\"horizontal gap:sm wrap:none align:center\">\n        ${loadingState === ClrLoadingState.success ? iconCheck : ''}\n        ${loadingState === ClrLoadingState.error ? iconError : ''}\n        ${loadingState === ClrLoadingState.loading ? iconSpinner(this.size) : ''}\n        ${loadingState === ClrLoadingState.default\n          ? html`<slot @slotchange=${() => spanWrapper(this.childNodes)}></slot>`\n          : ''}\n      </div>\n    </div>`;\n  }\n\n  static get styles() {\n    return [baseStyles, baseButtonStyles, styles];\n  }\n\n  private updateLoadingState() {\n    switch (this.loadingState) {\n      case ClrLoadingState.loading:\n        this.disableButton();\n        return;\n      case ClrLoadingState.success:\n        this.disableButton();\n        return;\n      case ClrLoadingState.error:\n        this.disableButton();\n        return;\n      default:\n        this.enableButton();\n    }\n  }\n\n  private disableButton() {\n    this.style.width = getElementWidth(this);\n    this.disabled = true;\n  }\n\n  private enableButton() {\n    this.loadingState = ClrLoadingState.default;\n    this.style.removeProperty('width');\n    this.disabled = false;\n  }\n}\n"]}