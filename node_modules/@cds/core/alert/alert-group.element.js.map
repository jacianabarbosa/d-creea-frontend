{"version":3,"file":"alert-group.element.js","sourceRoot":"","sources":["../../../src/alert/alert-group.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { html, LitElement, query } from 'lit-element';\nimport { baseStyles, property, querySlot, querySlotAll, syncProps } from '@cds/core/internal';\nimport { CdsAlert } from './alert.element.js';\nimport { AlertGroupTypes, AlertStatusTypes, AlertSizes } from './alert.interfaces.js';\nimport { styles } from './alert-group.element.css.js';\n\n/**\n * Alert groups are containers for a set of alerts. Alert groups can hold one or many alerts\n * inside of them with the expectation that all alerts will be of the same type. The exception\n * to this rule is the `loading` alert type, which will be displayed regardless of the type\n * of alert group containing it.\n *\n * ```typescript\n * import '@cds/core/alert/register.js';\n * ```\n *\n * ```html\n *   <cds-alert-group type=\"danger\">\n *     <cds-alert closable=\"true\">\n *       Single alert\n *       <cds-alert-actions>\n *         buttons, links\n *       </cds-alert-actions>\n *     </cds-alert>\n *     <cds-alert type=\"loading\">\n *       Single Alert\n *     </cds-alert>\n *     <cds-alert closable=\"true\">\n *       Another alert\n *       <cds-alert-actions>\n *         buttons, links\n *       </cds-alert-actions>\n *     </cds-alert>\n *   </cds-alert-group>\n * ```\n *\n * @element cds-alert-group\n * @slot - Content slot for the alerts\n * @cssprop --color\n * @cssprop --icon-color\n * @cssprop --icon-size\n * @cssprop --font-size\n * @cssprop --font-weight\n * @cssprop --letter-spacing\n * @cssprop --padding\n * @cssprop --background\n * @cssprop --border-color\n * @cssprop --border-width\n * @cssprop --border-radius\n */\nexport class CdsAlertGroup extends LitElement {\n  /**\n   * @type {default | sm}\n   * Sets the overall height and width of the alerts inside the alert group\n   */\n  @property({ type: String })\n  size: AlertSizes = 'default';\n\n  /**\n   * @type {default | banner | light}\n   * Passed down into the alerts inside the alert-group\n   */\n  @property({ type: String })\n  type: AlertGroupTypes = 'default';\n\n  /**\n   * Autosets the alert groups aria role to 'region'\n   */\n  @property({ type: String })\n  role = 'region';\n\n  /**\n   * @type {neutral | info | success | warning | danger | alt | loading}\n   * Sets the status of the alerts inside the alert group\n   */\n  @property({ type: String })\n  status: AlertStatusTypes = 'neutral';\n\n  @querySlotAll('cds-alert') private alerts: NodeListOf<CdsAlert>;\n\n  /** @private */\n  @querySlot('.pager', { assign: 'pager' }) pager: HTMLElement;\n\n  @query('.alerts') private alertSlot: HTMLElement;\n\n  render() {\n    return html`\n      <div\n        cds-layout=\"${this.pager ? 'horizontal wrap:none' : 'horizontal'}\"\n        class=\"${this.pager ? 'private-host' : 'private-host no-pager'}\"\n      >\n        <div class=\"pager-wrapper\" cds-layout=\"p-x:lg\">\n          <slot name=\"pager\"></slot>\n        </div>\n        <div class=\"alert-group-wrapper\">\n          <div\n            class=\"alerts\"\n            cds-layout=\"vertical wrap:none align:horizontal-stretch fill ${this.size === 'sm' ? 'gap:none' : 'gap:sm'}\"\n          >\n            <slot></slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  firstUpdated(props: Map<string, any>) {\n    super.firstUpdated(props);\n    this.setupAlertsUpdate();\n  }\n\n  private setupAlertsUpdate() {\n    const propsToSync = { status: true, type: true, size: true };\n    this.alertSlot?.addEventListener('slotchange', () => this.syncAlerts(propsToSync));\n  }\n\n  private async syncAlerts(propsToSync: { status: boolean; type: boolean; size: boolean }) {\n    await Promise.all(Array.from(this.alerts).map(a => a.updateComplete));\n\n    this.alerts.forEach(alert =>\n      syncProps(alert, this, {\n        status: propsToSync.status && this.type !== 'light' && alert.status !== 'loading',\n        type: propsToSync.type,\n        size: propsToSync.size,\n      })\n    );\n  }\n\n  updated(props: Map<string, any>) {\n    super.updated(props);\n    this.syncAlerts({\n      status: props.has('status'),\n      type: props.has('type'),\n      size: props.has('size'),\n    });\n  }\n\n  static get styles() {\n    return [baseStyles, styles];\n  }\n}\n"]}