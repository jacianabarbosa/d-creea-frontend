{"version":3,"file":"modal.element.js","sourceRoot":"","sources":["../../../src/modal/modal.element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AACnC,OAAO,EACL,OAAO,EAEP,uBAAuB,EACvB,IAAI,EACJ,WAAW,EAEX,QAAQ,EACR,gBAAgB,GACjB,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,kBAAkB,EAAE,MAAM,uCAAuC,CAAC;AAC3E,OAAO,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,4CAA4C,CAAC;AAClG,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AAOH,IAAa,QAAQ,GAArB,MAAa,QAAS,SAAQ,kBAAkB;IAAhD;;QAKU,SAAI,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;QAEtC,6DAA6D;QAE7D,aAAQ,GAAG,IAAI,CAAC;IAwDlB,CAAC;IAhEC,MAAM,KAAK,MAAM;QACf,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnC,CAAC;IAYD,iBAAiB;QACf,MAAM,gBAAgB,GAAyB;YAC7C,CAAC,YAAY,EAAE,WAAW,CAAC;YAC3B,CAAC,MAAM,EAAE,cAAc,CAAC;YACxB,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC;YAC9C,CAAC,WAAW,EAAE,IAAI,CAAC;SACpB,CAAC;QACF,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,iBAAiB,CAAC,IAAI,EAAE,gBAAgB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC,CAAC;SAC1F;aAAM;YACL,iBAAiB,CAAC,IAAI,CAAC,CAAC;SACzB;IACH,CAAC;IAED,+EAA+E;IAC/E,gEAAgE;IAChE,OAAO,CAAC,KAAuB;QAC7B,IAAI,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACzB,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;QACD,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC;IAED,wDAAwD;IACxD,MAAM;QACJ,OAAO,IAAI,CAAA;QACP,IAAI,CAAC,gBAAgB;;uDAE0B,IAAI,CAAC,IAAI,CAAC,YAAY;;;;;;;;;;;6DAWhB,IAAI,CAAC,IAAI,CAAC,UAAU;;;;;;;uDAO1B,IAAI,CAAC,IAAI,CAAC,UAAU;;KAEtE,CAAC;IACJ,CAAC;CACF,CAAA;AA5DS;IAAP,IAAI,EAAE;sCAA+B;AAItC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;0CACZ;AAIhB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;sCACU;AAb1B,QAAQ;IANpB,OAAO,CAAC;QACP,MAAM,EAAE;YACN,IAAI,EAAE,gBAAgB,CAAC,uBAAuB,CAAC;YAC/C,KAAK,EAAE,uBAAuB;SAC/B;KACF,CAAC;GACW,QAAQ,CAiEpB;SAjEY,QAAQ","sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { html } from 'lit-element';\nimport {\n  animate,\n  Animatable,\n  AnimationModalEnterName,\n  i18n,\n  I18nService,\n  HTMLAttributeTuple,\n  property,\n  reverseAnimation,\n} from '@cds/core/internal';\nimport { CdsInternalOverlay } from '@cds/core/internal-components/overlay';\nimport { appendCloseButton, removeCloseButton } from '@cds/core/internal-components/close-button';\nimport { styles } from './modal.element.css.js';\n\n/**\n * Web component modal.\n *\n * ```typescript\n * import '@cds/core/modal/register.js';\n * ```\n *\n * ```html\n * <cds-modal>\n *   <cds-modal-header>\n *      <h3 cds-text=\"title\">My Modal</h3>\n *   </cds-modal-header>\n *   <cds-modal-content>\n *     <p>Lorem Ipsum</p>\n *   </cds-modal-content>\n *   <cds-modal-actions>\n *       <cds-button>Ok</cds-button>\n *   </cds-modal-actions>\n * </cds-modal>\n * ```\n *\n * @element cds-modal\n * @slot\n * @slot cds-modal-content\n * @slot cds-modal-header\n * @slot cds-modal-actions\n * @event closeChange - notify when the user has clicked the close button\n * @cssprop --backdrop-background - inherited from the internal overlay component\n * @cssprop --layered-backdrop-background - inherited from the internal overlay component\n * @cssprop --border-color\n * @cssprop --border-width\n * @cssprop --border-radius\n * @cssprop --background\n * @cssprop --box-shadow\n * @cssprop --width\n */\n@animate({\n  hidden: {\n    true: reverseAnimation(AnimationModalEnterName),\n    false: AnimationModalEnterName,\n  },\n})\nexport class CdsModal extends CdsInternalOverlay implements Animatable {\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  @i18n() i18n = I18nService.keys.modal;\n\n  /** If false, the modal will not render the close button.  */\n  @property({ type: Boolean })\n  closable = true;\n\n  /** Sets the overall height and width of the modal and icon based on value */\n  @property({ type: String })\n  size: 'default' | 'sm' | 'lg' | 'xl';\n\n  toggleCloseButton() {\n    const closeButtonAttrs: HTMLAttributeTuple[] = [\n      ['cds-layout', 'align:top'],\n      ['slot', 'close-button'],\n      ['aria-label', this.i18n.closeButtonAriaLabel],\n      ['icon-size', '24'],\n    ];\n    if (this.closable) {\n      appendCloseButton(this, closeButtonAttrs, () => this.closeOverlay('close-button-click'));\n    } else {\n      removeCloseButton(this);\n    }\n  }\n\n  // TODO: Document what's going on here with the role dialog and aria modal true\n  // Also document why we have to keep everything in the light Dom\n  updated(props: Map<string, any>) {\n    if (props.has('closable')) {\n      this.toggleCloseButton();\n    }\n    super.update(props);\n  }\n\n  // modal-body requires a tab index so it can be scrolled\n  render() {\n    return html`\n      ${this.backdropTemplate}\n      <div class=\"modal-dialog private-host\" tabindex=\"-1\" cds-layout=\"m:md m@md:xl\">\n        <div cds-layout=\"display:screen-reader-only\">${this.i18n.contentStart}</div>\n        <div class=\"modal-content\" cds-layout=\"vertical gap:md gap@md:lg align:stretch\">\n          <div cds-layout=\"horizontal gap:md wrap:none align:vertical-center p-x:lg p-t:lg\">\n            <div>\n              <slot name=\"modal-header\"></slot>\n            </div>\n            <div cds-layout=\"align:right\">\n              <slot name=\"modal-header-actions\"></slot>\n            </div>\n            <slot name=\"close-button\"></slot>\n          </div>\n          <div class=\"modal-body\" tabindex=\"0\" aria-label=\"${this.i18n.contentBox}\" cds-layout=\"p-x:lg\">\n            <slot></slot>\n          </div>\n          <div cds-layout=\"align-stretch p-x:lg p-b:lg\">\n            <slot name=\"modal-actions\"></slot>\n          </div>\n        </div>\n        <div cds-layout=\"display:screen-reader-only\">${this.i18n.contentEnd}</div>\n      </div>\n    `;\n  }\n}\n"]}