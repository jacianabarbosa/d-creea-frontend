{"version":3,"file":"icon.element.js","sourceRoot":"","sources":["../../../src/icon/icon.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n  baseStyles,\n  Directions,\n  hasStringPropertyChanged,\n  hasStringPropertyChangedAndNotNil,\n  Orientations,\n  property,\n  internalProperty,\n  StatusTypes,\n  isString,\n  pxToRem,\n  EventSubscription,\n} from '@cds/core/internal';\nimport { html, LitElement, query, svg } from 'lit-element';\nimport { styles } from './icon.element.css.js';\nimport { ClarityIcons } from './icon.service.js';\nimport { updateIconSizeStyle } from './utils/icon.classnames.js';\nimport { getIconBadgeSVG, getIconSVG } from './utils/icon.svg-helpers.js';\n\n/**\n * Icon component that renders svg shapes that can be customized.\n * To load an icon, import the icon with the icon service.\n *\n * ```typescript\n * import '@cds/core/icon/register.js';\n * import { ClarityIcons, userIcon } from '@cds/core/icon';\n *\n * ClarityIcons.addIcons(userIcon);\n * ```\n *\n * ```html\n * <cds-icon shape=\"user\"></cds-icon>\n * ```\n *\n * @element cds-icon\n * @cssprop --color\n * @cssprop --badge-color\n */\nexport class CdsIcon extends LitElement {\n  static get styles() {\n    return [baseStyles, styles];\n  }\n\n  private _shape = 'unknown';\n  private _size: string;\n\n  @property({ type: String })\n  get shape() {\n    return this._shape;\n  }\n\n  /**\n   * Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\n   * the specified icon cannot be found in the icon registry.\n   */\n  set shape(val: string) {\n    if (hasStringPropertyChangedAndNotNil(val, this._shape)) {\n      const oldVal = this._shape;\n      this._shape = val;\n      this.requestUpdate('shape', oldVal);\n    }\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  /**\n   * @type {string | sm | md | lg | xl | xxl}\n   * Apply numerical width-height or a t-shirt-sized CSS classname\n   */\n  @property({ type: String })\n  set size(val: string) {\n    if (hasStringPropertyChanged(val, this._size)) {\n      const oldVal = this._size;\n      this._size = val;\n      updateIconSizeStyle(this, val);\n      this.requestUpdate('size', oldVal);\n    }\n  }\n\n  /**\n   * @type {up | down | left | right}\n   * Takes a directional value that rotates the icon 90Â° with the\n   * top of the icon pointing in the specified direction.\n   */\n  @property({ type: String })\n  direction: Directions;\n\n  /**\n   * @type {horizontal | vertical}\n   * Takes an orientation value that reverses the orientation of the icon vertically or horizontally'\n   */\n  @property({ type: String })\n  flip: Orientations;\n\n  /**\n   * Displays most icons in their \"filled\" version if set to `true`.\n   */\n  @property({ type: Boolean })\n  solid = false;\n\n  /**\n   * @type {info | success | warning | danger}\n   * Changes color of icon fills and outlines\n   */\n  @property({ type: String })\n  status: StatusTypes;\n\n  /**\n   * Inverts color of icon fills and outlines if `true`.\n   * Useful for displaying icons on a dark background.\n   */\n  @property({ type: Boolean })\n  inverse = false;\n\n  /**\n   * @type {info | success | warning | danger | inherit | warning-triangle | inherit-triangle}\n   * Sets the color of the icon decoration that appears in the top-right corner\n   * of the glyph. The icon decoration is derived from the following predefined types.\n   *\n   * The color of the badge can change according to the following\n   * list of statuses:\n   * 'info'  -> blue dot\n   * 'success' -> green dot\n   * 'warning' -> yellow dot\n   * 'danger' -> red dot\n   * 'inherit' -> dot inherits color of full icon glyph\n   * 'warning-triangle' -> yellow triangle\n   * 'inherit-triangle' -> triangle inherits color of full icon glyph\n   * unrecognized value, empty string, or true -> red dot\n   *\n   * By default, the badge displays a 'danger' dot (a red-colored dot).\n   *\n   * Setting the badge to 'false' or removing the attribute will remove the default icon badge.\n   */\n  @property({ type: String })\n  badge: StatusTypes | 'inherit' | 'warning-triangle' | 'inherit-triangle' | true | false;\n\n  /**\n   * @private\n   * given a pixel value offset any surrounding whitespace within the svg\n   */\n  @internalProperty({ type: Number })\n  innerOffset: number; // Performance optimization: default to undefined so attr is not initially rendered\n\n  @query('svg') private svg: SVGElement;\n\n  private subscription: EventSubscription;\n\n  updated(props: Map<string, any>) {\n    if (props.has('innerOffset') && this.innerOffset > 0) {\n      const val = pxToRem(this.innerOffset);\n      const dimension = `calc(100% + ${Number(val.replace('rem', '')) * 2}rem)`;\n      this.svg.style.width = dimension;\n      this.svg.style.height = dimension;\n      this.svg.style.margin = `-${val} 0 0 -${val}`;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.subscription = ClarityIcons.iconUpdates.subscribe(shape => {\n      if (shape === this.shape) {\n        this.requestUpdate();\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.subscription.unsubscribe();\n  }\n\n  protected render() {\n    return isString(ClarityIcons.registry[this.shape])\n      ? html`<span .innerHTML=\"${ClarityIcons.registry[this.shape] as string}\"></span>`\n      : svg`<svg .innerHTML=\"${\n          getIconSVG(this) + getIconBadgeSVG(this)\n        }\" viewBox=\"0 0 36 36\" xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\"></svg>`;\n  }\n}\n"]}