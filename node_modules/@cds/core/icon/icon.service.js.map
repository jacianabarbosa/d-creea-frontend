{"version":3,"file":"icon.service.js","sourceRoot":"","sources":["../../../src/icon/icon.service.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAElD,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAElD,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;AAE3E,MAAM,WAAW,GAAG,IAAI,YAAY,EAAU,CAAC;AAC/C,MAAM,QAAQ,GAAiB,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CAAW,EAAE,CAAC;AACrE,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE;IACvC,GAAG,EAAE,CAAC,MAAM,EAAE,GAAW,EAAE,KAAK,EAAE,EAAE;QAClC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAC,CAAC;AAEH;;;;;;;;;;GAUG;AACH,WAAW;AACX,MAAM,OAAO,YAAY;IAMvB;;OAEG;IACH,MAAM,KAAK,QAAQ;QACjB,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAwB;QACzC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,UAAU,CAAC,GAAG,OAAoB;QACvC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,MAAM,CAAC,oBAAoB,CAAC,SAAyB;QACnD,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC;;AA9BD;;GAEG;AACI,wBAAW,GAAG,WAAW,CAAC,iBAAiB,EAAE,CAAC","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { EventSubject } from '@cds/core/internal';\nimport { IconAlias, IconRegistry, IconShapeTuple } from './interfaces/icon.interfaces.js';\nimport { unknownIcon } from './shapes/unknown.js';\n\nimport { addIcons, setIconAliases } from './utils/icon.service-helpers.js';\n\nconst iconUpdates = new EventSubject<string>();\nconst registry: IconRegistry = { unknown: unknownIcon[1] as string };\nconst iconRegistry = new Proxy(registry, {\n  set: (target, key: string, value) => {\n    iconUpdates.emit(key);\n    target[key] = value;\n    return true;\n  },\n});\n\n/**\n * ClarityIcons is a static class that gives users the ability to interact with\n * the icon registry. This includes capabilities to add, retrieve, or alias icons\n * in the registry.\n *\n * @privateRemarks\n *\n * The icon registry is private to the module. There is no way to access it directly\n * outside of the module.\n *\n */\n// @dynamic\nexport class ClarityIcons {\n  /**\n   * Subscribe to receive updates when icons are added or updated\n   */\n  static iconUpdates = iconUpdates.toEventObservable();\n\n  /**\n   * Returns a readonly reference of the icon registry.\n   */\n  static get registry(): Readonly<IconRegistry> {\n    return iconRegistry;\n  }\n\n  static addIcons(...shapes: IconShapeTuple[]) {\n    addIcons(shapes, iconRegistry);\n  }\n\n  /**\n   * @description\n   * Use `addIcons` instead of `addAliases`\n   *\n   * This method is a backwords compatibility function to the old API\n   *\n   * The team will revisit this method for possible deprecation.\n   */\n  static addAliases(...aliases: IconAlias[]) {\n    aliases.forEach(alias => setIconAliases(alias, iconRegistry));\n  }\n\n  static getIconNameFromShape(iconShape: IconShapeTuple) {\n    return iconShape[0];\n  }\n}\n"]}