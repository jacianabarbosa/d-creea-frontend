{"version":3,"sources":["../../../projects/contenteditable/src/lib/contenteditable.directive.ts","../../../projects/contenteditable/src/lib/contenteditable.module.ts"],"names":["ContenteditableDirective","elementRef","renderer","unformattedPaste","document","this","propValueAccessor","contenteditable","prototype","callOnChange","onChange","nativeElement","callOnTouched","onTouched","writeValue","value","normalizedValue","setProperty","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","setAttribute","removeDisabledState","listen","listenerDisabledState","removeAttribute","preventFormatedPaste","event","execCommand","preventDefault","clipboardData","text","getData","e","Directive","args","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","Renderer2","Attribute","Document","decorators","type","Inject","DOCUMENT","Input","HostBinding","HostListener","NgModule","declarations","exports"],"mappings":"0fA4BE,SAAAA,EACUC,EACAC,EAC+BC,EACbC,GAHlBC,KAAAJ,WAAAA,EACAI,KAAAH,SAAAA,EAC+BG,KAAAF,iBAAAA,EACbE,KAAAD,SAAAA,EAXnBC,KAAAC,kBAAoB,cACiBD,KAAAE,iBAAkB,SAchEP,EAAAQ,UAAAC,aAAA,WAC8B,mBAAjBJ,KAAKK,UACdL,KAAKK,SAASL,KAAKJ,WAAWU,cAAcN,KAAKC,qBAKrDN,EAAAQ,UAAAI,cAAA,WAC+B,mBAAlBP,KAAKQ,WACdR,KAAKQ,aAWTb,EAAAQ,UAAAM,WAAA,SAAWC,GACT,IAAMC,EAA2B,MAATD,EAAgB,GAAKA,EAC7CV,KAAKH,SAASe,YAAYZ,KAAKJ,WAAWU,cAAeN,KAAKC,kBAAmBU,IAUnFhB,EAAAQ,UAAAU,iBAAA,SAAiBC,GACfd,KAAKK,SAAWS,GAOlBnB,EAAAQ,UAAAY,kBAAA,SAAkBD,GAChBd,KAAKQ,UAAYM,GAOnBnB,EAAAQ,UAAAa,iBAAA,SAAiBC,GACXA,GACFjB,KAAKH,SAASqB,aAAalB,KAAKJ,WAAWU,cAAe,WAAY,QACtEN,KAAKmB,oBAAsBnB,KAAKH,SAASuB,OACvCpB,KAAKJ,WAAWU,cAChB,UACAN,KAAKqB,wBAGHrB,KAAKmB,sBACPnB,KAAKH,SAASyB,gBAAgBtB,KAAKJ,WAAWU,cAAe,YAC7DN,KAAKmB,wBAMXxB,EAAAQ,UAAAoB,qBAAA,SAAqBC,GACnB,GAA8B,OAA1BxB,KAAKF,kBAAsD,SAAzBE,KAAKF,kBAAgCE,KAAKD,SAAS0B,YAAzF,CAGAD,EAAME,iBACE,IAAAC,EAAkBH,EAAKG,cACzBC,EAAOD,EAAcE,QAAQ,eAAiBF,EAAcE,QAAQ,QAC1E7B,KAAKD,SAAS0B,YAAY,cAAc,EAAOG,KAGzCjC,EAAAQ,UAAAkB,sBAAA,SAAsBS,GAC5BA,EAAEJ,2CAjGLK,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,+FACVC,UAAW,CAAC,CAAEC,QAASC,EAAAA,kBAAmBC,YAAaC,EAAAA,YAAW,WAAM,OAAA3C,KAA2B4C,OAAO,iDAhB1GC,EAAAA,kBACAC,EAAAA,0CA4BGC,EAAAA,UAASV,KAAA,CAAC,6BACyBW,SAAQC,WAAA,CAAA,CAAAC,KAA3CC,EAAAA,OAAMd,KAAA,CAACe,EAAAA,0DAXTC,EAAAA,+BACAC,EAAAA,YAAWjB,KAAA,CAAC,yBAAsB,CAAAa,KAAGG,EAAAA,4BAarCE,EAAAA,aAAYlB,KAAA,CAAC,gCAObkB,EAAAA,aAAYlB,KAAA,CAAC,sCA0DbkB,EAAAA,aAAYlB,KAAA,CAAC,QAAS,CAAC,oBC7F1B,iCAJCmB,EAAAA,SAAQnB,KAAA,CAAC,CACRoB,aAAc,CAACzD,GACf0D,QAAS,CAAC1D","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  HostListener,\n  HostBinding,\n  forwardRef,\n  Input,\n  Inject,\n  Attribute,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\n/** @dynamic */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[contenteditable][formControlName],[contenteditable][formControl],[contenteditable][ngModel]',\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ContenteditableDirective), multi: true }],\n})\nexport class ContenteditableDirective implements ControlValueAccessor {\n  @Input() propValueAccessor = 'textContent';\n  @HostBinding('attr.contenteditable') @Input() contenteditable = true;\n\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n  private removeDisabledState: () => void;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    @Attribute('unformattedPaste') private unformattedPaste: string,\n    @Inject(DOCUMENT) private document: Document\n  ) {}\n\n  @HostListener('input')\n  callOnChange() {\n    if (typeof this.onChange == 'function') {\n      this.onChange(this.elementRef.nativeElement[this.propValueAccessor]);\n    }\n  }\n\n  @HostListener('blur')\n  callOnTouched() {\n    if (typeof this.onTouched == 'function') {\n      this.onTouched();\n    }\n  }\n\n  /**\n   * Writes a new value to the element.\n   * This method will be called by the forms API to write\n   * to the view when programmatic (model -> view) changes are requested.\n   *\n   * See: [ControlValueAccessor](https://angular.io/api/forms/ControlValueAccessor#members)\n   */\n  writeValue(value: any): void {\n    const normalizedValue = value == null ? '' : value;\n    this.renderer.setProperty(this.elementRef.nativeElement, this.propValueAccessor, normalizedValue);\n  }\n\n  /**\n   * Registers a callback function that should be called when\n   * the control's value changes in the UI.\n   *\n   * This is called by the forms API on initialization so it can update\n   * the form model when values propagate from the view (view -> model).\n   */\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers a callback function that should be called when the control receives a blur event.\n   * This is called by the forms API on initialization so it can update the form model on blur.\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * This function is called by the forms API when the control status changes to or from \"DISABLED\".\n   * Depending on the value, it should enable or disable the appropriate DOM element.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'true');\n      this.removeDisabledState = this.renderer.listen(\n        this.elementRef.nativeElement,\n        'keydown',\n        this.listenerDisabledState\n      );\n    } else {\n      if (this.removeDisabledState) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n        this.removeDisabledState();\n      }\n    }\n  }\n\n  @HostListener('paste', ['$event'])\n  preventFormatedPaste(event: ClipboardEvent) {\n    if (this.unformattedPaste === null || this.unformattedPaste == 'false' || !this.document.execCommand) {\n      return;\n    }\n    event.preventDefault();\n    const { clipboardData } = event;\n    const text = clipboardData.getData('text/plain') || clipboardData.getData('text');\n    this.document.execCommand('insertText', false, text);\n  }\n\n  private listenerDisabledState(e: KeyboardEvent) {\n    e.preventDefault();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ContenteditableDirective } from './contenteditable.directive';\n\n@NgModule({\n  declarations: [ContenteditableDirective],\n  exports: [ContenteditableDirective],\n})\nexport class ContenteditableModule {}\n"]}