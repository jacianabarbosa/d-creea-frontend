{"version":3,"file":"ng-stack-contenteditable.umd.js","sources":["../../../projects/contenteditable/src/lib/contenteditable.directive.ts","../../../projects/contenteditable/src/lib/contenteditable.module.ts","../../../projects/contenteditable/src/public_api.ts","../../../projects/contenteditable/src/ng-stack-contenteditable.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  HostListener,\n  HostBinding,\n  forwardRef,\n  Input,\n  Inject,\n  Attribute,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\n/** @dynamic */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[contenteditable][formControlName],[contenteditable][formControl],[contenteditable][ngModel]',\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ContenteditableDirective), multi: true }],\n})\nexport class ContenteditableDirective implements ControlValueAccessor {\n  @Input() propValueAccessor = 'textContent';\n  @HostBinding('attr.contenteditable') @Input() contenteditable = true;\n\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n  private removeDisabledState: () => void;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    @Attribute('unformattedPaste') private unformattedPaste: string,\n    @Inject(DOCUMENT) private document: Document\n  ) {}\n\n  @HostListener('input')\n  callOnChange() {\n    if (typeof this.onChange == 'function') {\n      this.onChange(this.elementRef.nativeElement[this.propValueAccessor]);\n    }\n  }\n\n  @HostListener('blur')\n  callOnTouched() {\n    if (typeof this.onTouched == 'function') {\n      this.onTouched();\n    }\n  }\n\n  /**\n   * Writes a new value to the element.\n   * This method will be called by the forms API to write\n   * to the view when programmatic (model -> view) changes are requested.\n   *\n   * See: [ControlValueAccessor](https://angular.io/api/forms/ControlValueAccessor#members)\n   */\n  writeValue(value: any): void {\n    const normalizedValue = value == null ? '' : value;\n    this.renderer.setProperty(this.elementRef.nativeElement, this.propValueAccessor, normalizedValue);\n  }\n\n  /**\n   * Registers a callback function that should be called when\n   * the control's value changes in the UI.\n   *\n   * This is called by the forms API on initialization so it can update\n   * the form model when values propagate from the view (view -> model).\n   */\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers a callback function that should be called when the control receives a blur event.\n   * This is called by the forms API on initialization so it can update the form model on blur.\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * This function is called by the forms API when the control status changes to or from \"DISABLED\".\n   * Depending on the value, it should enable or disable the appropriate DOM element.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'true');\n      this.removeDisabledState = this.renderer.listen(\n        this.elementRef.nativeElement,\n        'keydown',\n        this.listenerDisabledState\n      );\n    } else {\n      if (this.removeDisabledState) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n        this.removeDisabledState();\n      }\n    }\n  }\n\n  @HostListener('paste', ['$event'])\n  preventFormatedPaste(event: ClipboardEvent) {\n    if (this.unformattedPaste === null || this.unformattedPaste == 'false' || !this.document.execCommand) {\n      return;\n    }\n    event.preventDefault();\n    const { clipboardData } = event;\n    const text = clipboardData.getData('text/plain') || clipboardData.getData('text');\n    this.document.execCommand('insertText', false, text);\n  }\n\n  private listenerDisabledState(e: KeyboardEvent) {\n    e.preventDefault();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ContenteditableDirective } from './contenteditable.directive';\n\n@NgModule({\n  declarations: [ContenteditableDirective],\n  exports: [ContenteditableDirective],\n})\nexport class ContenteditableModule {}\n","/*\n * Public API Surface of contenteditable\n */\n\nexport * from './lib/contenteditable.directive';\nexport * from './lib/contenteditable.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["Directive","NG_VALUE_ACCESSOR","forwardRef","ElementRef","Renderer2","Attribute","Inject","DOCUMENT","Input","HostBinding","HostListener","NgModule"],"mappings":"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"}