{"version":3,"file":"contenteditable.directive.d.ts","sources":["contenteditable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\n/** @dynamic */\nexport declare class ContenteditableDirective implements ControlValueAccessor {\n    private elementRef;\n    private renderer;\n    private unformattedPaste;\n    private document;\n    propValueAccessor: string;\n    contenteditable: boolean;\n    private onChange;\n    private onTouched;\n    private removeDisabledState;\n    constructor(elementRef: ElementRef, renderer: Renderer2, unformattedPaste: string, document: Document);\n    callOnChange(): void;\n    callOnTouched(): void;\n    /**\n     * Writes a new value to the element.\n     * This method will be called by the forms API to write\n     * to the view when programmatic (model -> view) changes are requested.\n     *\n     * See: [ControlValueAccessor](https://angular.io/api/forms/ControlValueAccessor#members)\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback function that should be called when\n     * the control's value changes in the UI.\n     *\n     * This is called by the forms API on initialization so it can update\n     * the form model when values propagate from the view (view -> model).\n     */\n    registerOnChange(fn: () => void): void;\n    /**\n     * Registers a callback function that should be called when the control receives a blur event.\n     * This is called by the forms API on initialization so it can update the form model on blur.\n     */\n    registerOnTouched(fn: () => void): void;\n    /**\n     * This function is called by the forms API when the control status changes to or from \"DISABLED\".\n     * Depending on the value, it should enable or disable the appropriate DOM element.\n     */\n    setDisabledState(isDisabled: boolean): void;\n    preventFormatedPaste(event: ClipboardEvent): void;\n    private listenerDisabledState;\n}\n"]}