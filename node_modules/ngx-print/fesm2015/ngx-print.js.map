{"version":3,"file":"ngx-print.js.map","sources":["ng://ngx-print/lib/ngx-print.directive.ts","ng://ngx-print/lib/ngx-print.module.ts"],"sourcesContent":["import { Directive, HostListener, Input } from '@angular/core';\r\n@Directive({\r\n  selector: \"button[ngxPrint]\"\r\n})\r\nexport class NgxPrintDirective {\r\n\r\n  public _printStyle = [];\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() printSectionId: string;\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() printTitle: string;\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() useExistingCss = false;\r\n\r\n  /**\r\n   * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input() printDelay: number = 0;\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @Input()\r\n  set printStyle(values: { [key: string]: { [key: string]: string } }) {\r\n    for (let key in values) {\r\n      if (values.hasOwnProperty(key)) {\r\n      this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\r\n      }\r\n    }\r\n    this.returnStyleValues();\r\n  }\r\n\r\n/**\r\n *\r\n *\r\n * @returns the string that create the stylesheet which will be injected\r\n * later within <style></style> tag.\r\n *\r\n * -join/replace to transform an array objects to css-styled string\r\n *\r\n * @memberof NgxPrintDirective\r\n */\r\npublic returnStyleValues() {\r\n  return `<style> ${this._printStyle.join(' ').replace(/,/g,';')} </style>`;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @returns html for the given tag\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  private _styleSheetFile = '';\r\n\r\n  /**\r\n   * @memberof NgxPrintDirective\r\n   * @param cssList\r\n   */\r\n  @Input()\r\n  set styleSheetFile(cssList: string) {\r\n    let linkTagFn = function(cssFileName) {\r\n      return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${cssFileName}\">`;\r\n    }\r\n    if (cssList.indexOf(',') !== -1) {\r\n      const valueArr = cssList.split(',');\r\n      for (let val of valueArr) {\r\n        this._styleSheetFile = this._styleSheetFile + linkTagFn(val);\r\n      }\r\n    } else {\r\n      this._styleSheetFile = linkTagFn(cssList);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns string which contains the link tags containing the css which will\r\n   * be injected later within <head></head> tag.\r\n   *\r\n   */\r\n  private returnStyleSheetLinkTags() {\r\n    return this._styleSheetFile;\r\n  }\r\n  private getElementTag(tag: keyof HTMLElementTagNameMap): string {\r\n    const html: string[] = [];\r\n    const elements = document.getElementsByTagName(tag);\r\n    for (let index = 0; index < elements.length; index++) {\r\n      html.push(elements[index].outerHTML);\r\n    }\r\n    return html.join('\\r\\n');\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param data the html element collection to save defaults to\r\n   * \r\n   */\r\n  private getFormData(data: any) {\r\n    for (var i = 0; i < data.length; i++) {\r\n      data[i].defaultValue = data[i].value;\r\n      if(data[i].checked) {\r\n        data[i].defaultChecked = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns html section to be printed along with some associated inputs\r\n   * \r\n   */\r\n  private getHtmlContents() {\r\n    let printContents = document.getElementById(this.printSectionId);\r\n    let innards = printContents.getElementsByTagName('input');\r\n    this.getFormData(innards);\r\n\r\n    let txt = printContents.getElementsByTagName('textarea');\r\n    this.getFormData(txt);\r\n    \r\n    return printContents.innerHTML;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @memberof NgxPrintDirective\r\n   */\r\n  @HostListener('click')\r\n  public print(): void {\r\n    let printContents, popupWin, styles = '', links = '';\r\n    const baseTag = this.getElementTag('base');\r\n\r\n    if(this.useExistingCss) {\r\n      styles = this.getElementTag('style');\r\n      links = this.getElementTag('link');\r\n    }\r\n\r\n    printContents = this.getHtmlContents();\r\n    popupWin = window.open(\"\", \"_blank\", \"top=0,left=0,height=auto,width=auto\");\r\n    popupWin.document.open();\r\n    popupWin.document.write(`\r\n      <html>\r\n        <head>\r\n          <title>${this.printTitle ? this.printTitle : \"\"}</title>\r\n          ${baseTag}\r\n          ${this.returnStyleValues()}\r\n          ${this.returnStyleSheetLinkTags()}\r\n          ${styles}\r\n          ${links}\r\n        </head>\r\n        <body>\r\n          ${printContents}\r\n          <script defer>\r\n            function triggerPrint(event) {\r\n              window.removeEventListener('load', triggerPrint, false);\r\n              setTimeout(function() {\r\n                closeWindow(window.print());\r\n              }, ${this.printDelay});\r\n            }\r\n            function closeWindow(){\r\n                window.close();\r\n            }\r\n            window.addEventListener('load', triggerPrint, false);\r\n          </script>\r\n        </body>\r\n      </html>`);\r\n    popupWin.document.close();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxPrintDirective } from './ngx-print.directive';\r\n\r\n@NgModule({\r\n  declarations: [NgxPrintDirective],\r\n  imports: [\r\n  ],\r\n  exports: [NgxPrintDirective]\r\n})\r\nexport class NgxPrintModule { }\r\n"],"names":[],"mappings":"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"}
